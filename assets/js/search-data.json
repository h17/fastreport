{
  
    
        "post0": {
            "title": "Optimizing Risks for a Portfolio of Cryptocurrencies",
            "content": "In this post we will take a task of optimizing a portfolio of cryptocurrency and apply treasury risk optimization algorithms there. Let&#39;s start with basics. What is a typical task of a treasury manager (if we focus on risk optimization). Well, you&#39;ve got a portfolio of positions (things you buy or sell) and currencies. You would like to protect your company from volatility and optimize financial performance. One of the algorithms successfully used there is a Stochastic Discount Factor calculation . TBD: add link, that allows us, etc. . This approach has been successfully applied to stock options trading and, presumably, can be applied to FICC trading also - pursuing the risk optimization. Now, for it to work we need prices for future contracts of different durations for number of years, per instrument. it is not easy for a common person to get such data for free (because holders of such data are rather greedy). Also, a casual reader won&#39;t related to oil future contracts. So we have created an imaginary enterprise - someone is mining ethereum and bitcoin (those are your goods) and paying electricity for mining stations in US Dollars (costs in functional currency). . This guy wants to optimize his enterprise performance by selling future contracts so that his risk exposure is fixed (e.g. 1 BTC) . Copyright &copy; Maxim Korotkov; 2021. This article is published under a Creative Commons Attribution 4.0 International License. .",
            "url": "https://yourdatablog.com/cryptosdf/",
            "relUrl": "/cryptosdf/",
            "date": " • Apr 1, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Encoding Categorical Variables. The Rainbow Method",
            "content": ". Introduction . &quot;I have 2000 features and I need to get to 50 features and keep model as good or better&quot; was how this all started. This is familiar to anyone in institutional data science where you need to carefully vet every model and look at each feature to make sure it is fine from the standpoint of regulation. What is valuable about this story is that it is based on a real production model that was developed by Anna Arakelyan at MassMutual and a method suggested by Dmytro Karabash. We will get to detailed results at the end but here&#39;s a preview: . The rainbow method outperforms the One-hot easily. In fact, the rainbow method even shows better result for 50 features than One-hot does for 100. Also note that when droping from 50 to 10 features, the reduction in macro-f1 if you use One-hot is 6 times that of the rainbow method (3 times for kappa and accuracy, 2 times for macro-auc). . Both models actually keep improving as the number of features goes up. Though the improvement is substantially faster and bigger for the rainbow method. . Background . Data encoding is the crucial part of any data science pipeline. No matter which machine learning algorithm is used - there is no avoiding of data cleaning and encoding. Especially with dirty and complex real data sets, ensuring the most appropriate and efficient way of feature encoding and engineering is a nontrivial problem. While encoding quantitative and binary columns is usually a straightforward task, the encoding of categorical variables deserves a deeper look. One of the most popular encoding methods for categorical variables has been the One-hot procedure. It generates an indicator variable for every category and, thus, creates a set of K new features, where K is the number of categories. One significant implication of this method is the dimensionality increase. Depending on the magnitude of K, it can have various undesirable technical consequences: substantial raise of computational complexity, loss of degrees of freedom (N-K, where N is the number of samples), multicollinearity, and, ultimately, an overfitted model. Non-technical consequences include unnecessary complication of the model that should be communicated to final users and that contradict the law of parsimony aka Occam&#39;s razor. . Method . We call it rainbow from a very simple analogy: if you have a categorical feature with names &quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Indigo&quot; and &quot;Violet&quot;, in other words - colors of the rainbow, instead of one hot encoding, you can simply create one feature with encoding: . . 0 = &quot;Red&quot; 1 = &quot;Orange&quot; 2 = &quot;Yellow&quot; 3 = &quot;Green&quot; 4 = &quot;Blue&quot; 5 = &quot;Indigo&quot; 6 = &quot;Violet&quot; . . This would replace seven One-hot features with one rainbow. . Most of the nominal variables, from the first glance, seem like they cannot be converted to a quantitative scale. This is where we suggest finding a rainbow. The seemingly unordered categories acquire a perfect order if we find a scale, where each category fits into its own unique place. With the color - the natural scale is Hue. But it is not the only one. We can think of, say, brightness, saturation, color temperature, etc. We invite you to experiment with a few different rainbows that might capture different nuances of the categorical quality. . You can actually make and use two or more rainbows out of one categorical variable depending on the number of categories K and the context. . We don&#39;t recommend to use much more than $ sqrt{K}$ rainbows as we explain below. . Why is rainbow better than any other choice? It is very simple and intuitively sensible. In many cases it is not even that important which rainbow you choose (and by that we mean the color order), most of the orders would be better than using One-hot. The more natural orders are just likely to be slightly better than others and easier to remember. . Hence our motto:&quot;When a nature gives you a rainbow, take it...&quot; . Important note here: this method is highly efficient in conjunction with the models that rely on variables as ranks rather than exact values. For example, decision trees, random forest, gradient boosting - these algorithms will output the same result if, say, the variable Number of Children is coded as . . 0 = &quot;0 Children&quot; 1 = &quot;1 Child&quot; 2 = &quot;2 Children&quot; 3 = &quot;3 Children&quot; 4 = &quot;4 or more Children&quot; . . or as . . 1 = &quot;0 Children&quot; 2 = &quot;1 Child&quot; 3 = &quot;2 Children&quot; 4 = &quot;3 Children&quot; 5 = &quot;4 or more Children&quot; . . or even as . . -100 = &quot;0 Children&quot; -85 = &quot;1 Child&quot; 0 = &quot;2 Children&quot; 10 = &quot;3 Children&quot; 44 = &quot;4 or more Children&quot; . . as long as the correct order of the categories is preserved. The values themselves don&#39;t carry the quantitative role in these algorithms. It is the rank of the variable that matters, and a tree-based algorithm will use its magic to make the most appropriate splits to introduce new tree nodes. . The application of our method for other algorithms such as Linear Regression, Logistic Regression is out of scope of this article. We expect that such way of feature engineering would be still beneficial, but that is a subject of a different investigation. . Note that by using a rainbow rather than One-hot we are not losing any of the signal. Let&#39;s consider two scenarios. First, if the categories are wildly different, and each one introduces a substantial gain to the model, the algorithm such as xgboost will just make the splits between all the values which is perfectly equivalent to One-hot. Second, if the chosen rainbow order is the least favorable, once again, the algorithm will make all the necessary splits. However, if the rainbow order is even somewhat meaningful, the algorithm would capture the similarity in the adjacent values by making a smart decision about the number and location of splits. For example, it will decide if some of the adjacent values should be clustered together, or separated. This will save us dimensionality without any informational loss. . Examples . The application of our method depends highly on the level of measurement of the treated variables. While quantitative variables have a ratio scale, i.e. they have a meaningful 0, ordered values, and equal distances between values; categorical variables usually have either interval, or ordinal, or nominal scales. Let us illustrate our method for each of these types of categorical variables. . Interval variables have ordered values, equal distances between values, but the value itself is not necessarily meaningful, for example, 0 does not indicate an absence of a quality. The common examples of interval variables are Likert scales: . . How likely is the person to buy a smartphone mobile phone? 1 = &quot;Very Unlikely&quot; 2 = &quot;Somewhat Unlikely&quot; 3 = &quot;Neither Likely, Nor Unlikely&quot; 4 = &quot;Somewhat Likely&quot; 5 = &quot;Very Likely&quot; . . In a straightforward way, if we simply use the raw values 1 through 5, that will save us dimensionality without losing a single bit of information. The algorithm such as xgboost will make the appropriate splits instead of being forced to use the splits predetermined by One-hot, which in many cases is simply an overfit. . Ordinal variables have ordered values that are meaningless, and the distances between values are also not equal or not even explainable. An example: . . What is the highest level of Education completed by the person? 1 = &quot;No High School&quot; 2 = &quot;High School&quot; 3 = &quot;Associate Degree&quot; 4 = &quot;Bachelor&#39;s Degree&quot; 5 = &quot;Master&#39;s Degree&quot; 6 = &quot;Doctoral Degree&quot; . . Similar to interval variables, raw ordinal numeric codes can be used in the model without introducing any issues, as long as the order is correct. In some cases, a variable is intrinsically ordinal, but the given numeric codes don&#39;t follow the correct order - in these situations we could simply reorder categories and then use this updated variable as a quantitative feature. . The use of natural rainbow for interval and ordinal variables is likely not the cause for concern because it is clearly a perfect alternative to One-hot for tree-based algorithms. The more complicated and non-obvious question is how to treat nominal variables. . Nominal variables have no obvious order between categories, and are almost always encoded with One-hot method. This is where finding a rainbow becomes valuable, turning something, that seems completely non quantitative, into a quantitative scale. In this way, a nominal variable Color . . A = &quot;Red&quot; B = &quot;Blue&quot; C = &quot;Green&quot; D = &quot;Yellow&quot; . . is replaced by the newly engineered rainbow feature . . 1 = &quot;Blue&quot; 2 = &quot;Green&quot; 3 = &quot;Yellow&quot; 4 = &quot;Red&quot; . . Lets us show a few other examples of creating rainbows. . . Marital Status A = &quot;Married&quot; B = &quot;Single&quot; C = &quot;Inferred Married&quot; D = &quot;Inferred Single&quot; . . If we think about Single and Married as the two ends of the spectrum, then Inferred Single could be between the two ends, closer to Single, while Inferred Married would be between the two ends, closer to Married. That would make sense because Inferred holds certain degree of uncertainty. Thus, the following order would be reasonable: . . 1 = &quot;Single&quot; 2 = &quot;Inferred Single&quot; 3 = &quot;Inferred Married&quot; 4 = &quot;Married&quot; . . In case there are any missing values here, the Unknown category fits exactly in the middle between Single and Married as there is no reason to prefer one end over the other. So the modified scale could look like this: . . 1 = &quot;Single&quot; 2 = &quot;Inferred Single&quot; 3 = &quot;Unknown&quot; 3 = &quot;Inferred Married&quot; 4 = &quot;Married&quot; . . A few other rainbows. Stress that there can be more than one. . Consider another variable: . . Occupation 1 = &quot;Professional/Technical&quot; 2 = &quot;Administration/Managerial&quot; 3 = &quot;Sales/Service&quot; 4 = &quot;Clerical/White Collar&quot; 5 = &quot;Craftsman/Blue Collar&quot; 6 = &quot;Student&quot; 7 = &quot;Homemaker&quot; 8 = &quot;Retired&quot; 9 = &quot;Farmer&quot; A = &quot;Military&quot; B = &quot;Religious&quot; C = &quot;Self Employed&quot; D = &quot;Other&quot; . Finding a rainbow here might be harder, but here are a few ways to do it: we could order occupations by average annual salary, by its prevalence in the geographic area of interest, or by information from some other dataset. That might involve calling a Census API or some other data source, and might be complicated by the fact that these values are not static, but these are still viable solutions. . What if there is no natural rainbow? . In some situations though we cannot find a logical order for the rainbow because the variable itself is not interpretable. An example could be a black box column made by a third party: . . Financial Cluster 1 = &quot;Market Watchers&quot; 2 = &quot;Conservative Wealth&quot; 3 = &quot;Specific Savers&quot; 4 = &quot;Tried and True&quot; 5 = &quot;Trendy Inclinations&quot; 6 = &quot;Current Consumers&quot; 7 = &quot;Rural Trust&quot; 8 = &quot;City Spotlight&quot; 9 = &quot;Career Conscious&quot; 10 = &quot;Digital Financiers&quot; 11 = &quot;Financial Futures&quot; 12 = &quot;Stable Influentials&quot; 13 = &quot;Conservatively Rural&quot; . . In this case we might not have a clear idea how to order categories due to lack of knowledge of what each category entails. What to do with such variables? . We recommend creating an artificial rainbow by looking at how each category is related to the target variable. In case of a binary classification problem we have a binary target variable, and we could construct a rainbow at least two different ways. . First way is to place categories in the order of correlation with target variable. So the category with the highest value of correlation with the dependent variable would acquire numeric code 1, and the category with the lowest correlation would acquire numeric code 13. So our rainbow in this case would mean the relationship between the cluster and the target variable. . Second way is similar to the first one, but instead of correlation, we could look at the percent of target variable taking value of 1 (positive) given each of the categories. Suppose, among Market Watchers percent of positive targets is 0.67, while for Conservative Wealth it is 0.45. In that case, Market Watchers will be ordered higher than Conservative Wealth (or lower, if the target percent scale is ascending). In other words, this rainbow would reflect the prevalence of positive target inside each category. . In case of multiclass classification, we could create rainbows for each class to represent relationship between categories and each class separately. In the case of regression and continuous target, we could rely on the correlation method mostly. . We briefly described the Rainbow method, and below we provide theoretical justification for it and then an empirical application that illustrates its superiority over One-hot. . Application to a Real Data Science Problem . We will illustrate the effectiveness of the rainbow encoding method using the real data science project developed in the Customer Journey domain of Data Science group at MassMutual - a life insurance company with a team of over 200 top-notch data scientists, engineers, and technologists. . Business Use Case . In a nutshell, the data task is a multiclass classification problem that aims to predict one of the five Mindset Segments for each of the prospective customers. . Segment Description . Self-Assured | Confident, in control, and middle-aged, often with families | . Juggler | (&gt;= 35 years old) Younger families, less confident in their finances | . Starter | (&lt; 35 years old) Youngest segment, with lower levels of financial confidence due to lack of experience | . Day to Day | Older, worried, and pessimistic about their finances | . Well-Established | In control, and highly satisfied with financial situation | . The segmentation framework represents five classes that reflect a person&#39;s age, financial stability, and attitude towards financial decisions. The predicted segments are then used by marketers in different types of campaigns for targeting and customization. For example, Self-Assured customers would value more independence and autonomy in making decision of buying a life insurance policy whereas Day to Day customers would value having a guidance and a long and thorough explanations of different financial products by a dedicated advisor. . The true segment labels come from MassMutual vendors that ran the mindset survey in 2017, 2018, and 2020. The total size of data is 17.5K rows. The main database we use for this problem is provided by Acxiom and covers about 300 columns representing rich set of demographic characteristics, composition of the household, income and net worth, financial behavior, and digital savvyness. . Using Acxiom data and the Mindset Segmentation prediction task, we will compare the conventional One-hot encoding with the Rainbow method. For a task of 5-class classification we will demonstrate the following metrics - accuracy, Cohen&#39;s kappa, and a few other standard metrics . Cohen&#39;s Kappa is one the best metrics for an unbalanced multiclass classification problem. Accuracy is used for a simple interpretation purposes. . All Categorical Variables . First of all, we took all existing categorical variables - interval, ordinal, and nominal, and excluded any other variables - quantitative and binary. We would like to compare the model performance using the two types of encoding for the same set of catogorical factors. We then applied a target stratified 4-fold Cross Validation split. All the data processing from this point on is done inside the cross validation loop, i.e. the creation of One-hot features and Rainbow features is learned from each fold train set and applied to each fold validation set. The total set of 111 variables was transformed into 201 Rainbow features and, alternatively, into 2260 One-hot features (with very slight deviations in N in 4 different folds). . Type of variable N raw N Rainbow encoded N One-hot encoded . Interval | 64 | 64 | 1670 | . Ordinal | 14 | 14 | 178 | . Nominal | 33 | 123 | 412 | . Total | 111 | 201 | 2260 | . About Nominal Variables . One can notice that number of raw and Rainbow encoded features is the same (64 and 14), while 33 raw nominal features turned into 123 Rainbow features. That is because interval and ordinal features have a straightforward rainbow tranformation whereas there were two kinds of nominal variables. Out of 33 nominal variables, for 23 we found a natural rainbow, while for 10 variables we applied correlation ordering and target percent ordering. Since we deal with 5 classes, we made 10 new features for each of these variables. For example, given the name of feature &quot;Financial_Cluster&quot; and 5 segment names, we made features . Financial_Cluster_Self-Assured_correlation_rank | Financial_Cluster_Juggler_correlation_rank | Financial_Cluster_Starter_correlation_rank | Financial_Cluster_Day to Day_correlation_rank | Financial_Cluster_Well-Establishes_correlation_rank and | Financial_Cluster_Self-Assured_target_percent | Financial_Cluster_Juggler_target_percent | Financial_Cluster_Starter_target_percent | Financial_Cluster_Day to Day_target_percent | Financial_Cluster_Well-Establishes_target_percent In this way, 33 raw nominal variables turned into 123 Rainbows. | . It is important to note that the search for natural or non-natural Rainbows is highly project and context specific, and is more of an art than a craft. For instance, for a binary classification problem, there probably would have been only one or two Rainbows for each categorical feature given a single target class. . Results and conclusions . Let us start from overall averages for all runs: . accuracy kappa . method . one_hot 0.407 | 0.174 | . rainbow 0.420 | 0.201 | . Clearly, the average metrics across all models are notably higher for Rainbow encoding. The following plots show dynamic of metrics depending on every hyperparameter. These plots also clearly demonstrate the superiority of Rainbow method for every hyperparameter and every metric. . &lt;AxesSubplot:&gt; . Next, let&#39;s compare the runtime for each method. Average model running time is about 9 times faster for Rainbow method than for One-hot. So, in addition to a substantial increase in model performance metrics, Rainbow method can save data scientists huge amount of time. . Interval, Ordinal, and Nominal . Below are the results of the models that applied two types of encoding to interval, ordinal, and nominal features separately. . As expected, interval and ordinal features gain the most from Rainbow encoding, while nominal variables - less so. . Feature Selection . Finally, to make a comparison more fair in terms of dimensionality, we picked top 10, top 50, and top 100 features from each feature set - Rainbow and One-hot. We used feature importance attribute of the XGBoost model and aggregated feature importance scores for 4 cross validation folds on the best hyperparameter set for each encoding type. Below are the results. . *weighted in the table above is class-weighted. . Kappa is significantly higher for the Rainbow method, especially with the lower number of selected features. As mentioned before rainbow with 50 features is better than One-hot with 100 features, we just see this that is true in all the regularly used metrics. Note the drop for macro-f1 score drop from 50 to 10 features in One-hot versus rainbow. . Conclusion . As shown above, the Rainbow method is an elegant and simple way to encode categorical variables, that will significantly reduce the data dimensionality without losing any part of valuable signal, that will likely cause substantial improvements in model performance metrics (or, at the very least, will not cause any reductions in metrics), and that will save great amount of time for modelers. . Finally, we should note that this article just opens the conversation about the Rainbow method, and by no means exhausts the topic. In the potential future investigations, we could explore some other aspects. To name a few: binary and continuous target variables; comparison with other dimensionality reduction methods, such as PCA; how missing values fit the Rainbow framework; is there any limit and implications of combining seemingly unrelated features into a single Rainbow. We hope to open the gate for further questions and feedback on this method. . Conditional Mathematical Foundation . Framework . Aside from reducing number of variables which was our main goal, we would also like to understand why do rainbows produce better results. . We wouldn&#39;t completely satisfy Einstein here, but base our foundation on assumption that pruning of the trees that maximize unregularized log-loss producing supperior values. In fact regulariation of trees, pruning of trees and various early stopping rules are all trying to achieve the same goal, which is often summarized in &quot;avoid overfit&quot;, yet let us examine what that really means in our case by case basis. . Imagine you have K categories for each the optimal values to be added to the nodes are 1, 2, ..., K in some order not necessarily random. If that was the case both on-hot encoding and rainbow method would require K-1 comparisons. We have a tie. That would be the case where all categories should be distinquished with different values at the end-nodes, which is rarely the case. . To make things simple lets now assume we have 4 features and the optimal values at the end nodes are 1, 1.01, 2, 2.01 Assume further that $ epsilon$ 0.01 is low enough so that the first and second pair of of categories should not be distinguished (or the nodes that distinguished should be pruned). . That is the whole definition of &quot;avoid overfit&quot;, the point here is that at some point signal to uncertainty ratio is to low to make a distinction and that is why xgboost has at least 7 hyperparameters that should help in not distinquishing these pairs: max_depth, gamma, min_child_weight, lambda, alpha, min_split_loss, max_leaves . Definitions of these hyperparameters can be found here https://xgboost.readthedocs.io/en/latest/parameter.html . Now to explaination how each one of these would prevent between split of first and second categories: . Hyperparameters that help to avoid overfit. . Taking the above 1, 1.01, 2, 2.01 example let us look at how each of these 7 hyp . max_depth: disallows too many splits so that on each split only best splits would be chosen, so given your max_depth&lt;K-2, you would not get to split the first and second category into different branches (those a next tree might). . | gamma, if this one is $&lt;0.01$, it would not split as the difference is smaller than gamma. . | min_child_weight, if each category has less children that min_child_weight it would not split down to one category, . | lambda: these will help not assign the tree that does split a very small weight . | alpha: similar as lambda . | min_split_loss: similar to gamma except it would truncate later . | max_leaves: similar to max_depth . | How does rainbow help? . Above is just one example of how overfit might come into question, there are many other ways and for this particular reasn there are a few more parameters hat are part of xgboost parameters (rather than tree building hyperparameters described above). These are num_boost_round and early_stopping_rounds, which both determine num of trees which will be in the final model. To keep it simple let us stick with num_boost_round and for simplicity let us also make max_depth=1. . So in this case it makes sense to analyse the number of trees you are going to use (sing max_depth=1) it is a simple logistic model based on a number of comparisons. In this case rainbow method would only require one which will split inbetween 2nd and 3rd category, while One-hot would require 2. . What if these were randomly permuted: then One-hot would always require 2 (it actually doesn&#39;t care about permutation), and rainbow would depend on the permutation (I will leave only integer parts): . for 1,1,2,2 and 2,2,1,1 it would be 1; . | for 1,2,2,1 and 2,1,1,2 it would require 2 . | and for 1,2,1,2 and 2,1,2,1 it would require 3 . | . So it seems in third of the cases we are better, in third same and in a third worse. So our hope is that natural rainbows are close to 1,1,2,2 situation rather than 1,2,1,2 one. However if we had two rainbows that would list (1,2,3,4) and (1,3,2,4) cagories we would always be able to reduce it to 1 or two comparisons. . The reason we suggest not to use more than $log_2 K$ rainbows is not to surpass a number of encodings in what is called binary-One-hot-encoding. One easy way to create $log_2 K$ out of any rainbow is by rotating binary digits of your first rainbow; note rotating not permuting as if you would permute you would get $(log_2 K)!$ which is greater than K for K&gt;8. . One-hot versus one rainbow formula . So let us come back to a general situation of K classes and only one rainbow. In case K classes should be split into $g$ groups in terms of tree structure, than One-hot would need $K - G_{max}$ comparisons, where $G_{max}$ is the size of the largest group and rainbow would need the number of consequitive pairs in distinct groups, lets notate it as D. Expected value value of D then can be expressed (here expectation is always with respect to a random permutation of end-values of classes: . begin{align} mathbb E[D] &amp;= (K - 1) * (1- frac{ sum_i G_i*(G_i-1)} {K(K-1)}) notag &amp;= (K-1)- frac{ sum G_i*(G_i-1)} {K} notag end{align}where $G_i$ is the size of the $i^{th}$ group and summation is over all groups. One can in fact show that $K - G_{max} leq mathbb E[D]$ via the following inequality: . begin{align} frac{ sum G_i*(G_i-1)} {K} &amp; leq frac{ sum G_i*(G_{max}-1)} {K} notag &amp; = ( frac{ sum G_i} {K} ) * (G_{max}-1)=G_{max}-1 tag{1} end{align}hence continuing expression of $ mathbb E[D]$ from before we get: . begin{align} mathbb E[D] &amp;= (K-1)- frac{ sum G_i*(G_i-1)} {K} notag &amp; geq (K-1)-G_{max}-1=K-G_{max} tag{2} end{align}so one random rainbow in this sense is worse than One-hot encodings but that is not a surpise as you have 1-feature versus K features. Now this is when rainbow was chosen completely at random, it we got lucky we would only need $D_{min}=g-1$ and in this case we are always better off: . begin{align} D_{min} &amp; = g-1 = ( sum_{i=1}^{g} 1) - 1 notag &amp; leq ( sum_{i=1}^{g} G_i) - G_{max} = K - G_{max} tag{3} end{align}We also see that $G_{max}-( mathbb E [C]+1)$ is greatests when $G_{i}$&#39;s and $G_{max}$ are far apart as the only part in the above equation where we had non strict equality was where we subsituted $G_i$ by $G_{max}$. . note:the number of samples N is not in the formulas (and shouldn&#39;t be) it is all about K, the number of classes here. . How many random rainbows do you need to outperform One-hot? . Let us call this number of rainbows $R$ and assume it is not too large, then corresponding $D$ can on average be begin{align} mathbb E[D] &amp; = (K - 1) * (1- frac{ sum_i G_i*(G_i-1)} {K(K-1)})^R notag &amp; approx (K-1)- R* frac{ sum G_i*(G_i-1)} {K} tag{4} end{align} So from (1) we get that . $$ mathbb E[D] leq K-G_{max}$$ if we let $R$ be greater than $ frac{G_{max}}{G_i}$ for all $i$ or in other words if: $$ R geq frac{G_{max}}{G_{min}} $$ This is of course less than $G_{max}$. Similar computatoin can also show that it also has to be less than $g$, but then from $g*G_{max} leq K$ we can show that $R leq sqrt{K}$. In fact with a bit more detailed calculation one can show $R lessapprox frac { sqrt{K}}{2}$ as $K$ gets larger and this actually would imply that $R$ is not too large in the approximation we used above. . Hence we showed that single perfect rainbow outperforms, $K$ One-hot encoding and that $ frac{ sqrt{K}}{2}$ random rainbows would outperform $K$ One-hot encodings. . Bibliography and References and Technical Details . References . While the topic of One-hot and binary-One-hot encoding has been touched by many authors: . https://towardsdatascience.com/smarter-ways-to-encode-categorical-data-for-machine-learning-part-1-of-3-6dca2f71b159 | https://towardsdatascience.com/stop-One-hot-encoding-your-categorical-variables-bbb0fba89809 | . The approach presented here is rarely used in industry or academia, while has shown superior results and by definition creates less features. . Basic Postprocessing . Before proceeding with models, we applied basic feature selection to each feature set: . Dropped variables with all values missing | No imputations was done – missingness is handled by XGBoost (see XGBoost is not black magic) | Droped variables with variance being exactly 0 | Dropped perfect duplicates | Dropped perfect rank duplicates | . These procedures reduced our Rainbow feature set and One-hot feauture set to 183 and 2095 respectively. . Hyperparameter Space . We ran all possible XGBoost multiclass classification models covering this space: . &#39;objective&#39;: &#39;multi:softprob&#39; &#39;eval_metric&#39;: &#39;mlogloss&#39; &#39;num_class&#39;: 5 &#39;subsample&#39;: 0.8 &#39;max_depth&#39;: [2, 3, 5] &#39;eta&#39;: [0.1, 0.3, 0.5] &#39;n_estimators&#39;: [50, 100, 200] . Thus, we ran 3 max_depth 3 eta 3 n_estimators 4 folds 2 encoding methods = 216 models. Below we report average cross validation metrics for both encoding methods. .",
            "url": "https://yourdatablog.com/rainbow/",
            "relUrl": "/rainbow/",
            "date": " • Mar 15, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Detecting sounds with Deep Learning",
            "content": "Introduction . Have you ever woken up without understanding what it was, but knowing for sure that some sound isn’t right? . Sound identification is one of our instincts that kept human beings safe. Sounds play a significant role in our life, Starting from recognizing a predator nearby to being inspired by music, to lots of human voices, to the cry of a bird. Therefore, developing audio classifiers is a crucial task in our lives. . In many cases, it is crucial to classify the source of the sounds and is already widely used for various purposes. In music, there&#39;s a classifier for the genre of music. Recently similar systems started to be used to classify bird calls, something that historically was done by a profession called Ornithologists. Their goal is to categorize which sounds of birds because it is difficult to detect the birdcalls from the fields or noisy environments. . Recently, deep learning (DL) has become one of the popular technologies to solve lots of tasks in our lives due to its accuracy, along with the improvement of computational devices like CPU (Central Processing Unit), GPU (Graphics Processing Unit). The below chart shows how big the deep learning market is and the expected size of its future from the aspects of the software, hardware, and services. . . Fig 2. Deep Learning market of U.S. from 2014 to 2025 . In this post, We will take the task of reading an audio file with zero to few bird calls and use deep learning to identify which bird it is, based on the Cornell Birdcall Identification Kaggle Challenge where we’ve got a silver medal. . How to deal with the data? . In the previous post our team wrote, we explained how to load sound data and get it to a spectrogram format and why it is crucial. Here’s an example of a spectrogram of birdcalls of Alder Flycatcher and a photo of such a bird, just in case you are curious. . . Fig 3. log mel spectrogram of birdcall, Alder Flycatcher The speed of data processing is one of the keys to utilizing a deep learning model. Although the increment of computation power, the computation cost of audio processing is still expensive on CPUs. However, if we choose a better computation resource to process the data like GPUs, it can boost the speed of about ten to one hundred times faster! In this post, we will show how to process Spectrogram fast by utilizing a library called torchlibrosa that enables us to process Spectrogram on a GPU. . Build Spectrogram processor . torchlibrosa is a Python library that has some audio processing functions implemented in PyTorch that can utilize GPU resources. PyTorch enables running this Spectrogram algorithm on a GPU. Here&#39;s an example of extracting Spectrogram features using torchlibrosa. . from torchlibrosa.stft import Spectrogram spectrogram_extractor = Spectrogram( win_length=1024, hop_length=320 ).cuda() . Load audio data . We can load audio data via librosa library, which is one of the popular Python audio processing libraries. . import librosa # get raw audio data example, _ = librosa.load(&#39;img-kim/example.wav&#39;, sr=32000, mono=True) . Process Spectrogram . import torch raw_audio = torch.Tensor(example).unsqueeze(0).cuda() spectrogram = spectrogram_extractor(raw_audio) . Benchmark processing speed . We can process audio data on the GPU by using torchlibrosa library. You may wonder how much faster on the GPU than the CPU. Here&#39;s the speed of processing the benchmark between the devices. We just selected audio from the dataset obtained from the Cornell Birdcall Identification Kaggle Challenge, which is publicly available, and compared how long it takes on CPU and GPU. We tested on the Colab environment to reproduce the performance, and it is about x15 faster on GPU than CPU to process log-mel spectrogram from about 5 minutes audio. . . Fig 4. Processing time between CPU (Intel Xeon 2.20 GHz) and GPU (Nvidia T4). librosa is used for CPU benchmark, torchlibrosa is used for GPU benchmark How to classify a sound? . As mentioned above, deep learning also shows a brilliant performance in the audio domain. It can catch various patterns of target classes nicely in the time-series data. The more important thing is the environment and data matter in bird calls. The environments like fields or the middle of the mountains, there are lots of noises interfering with the birdcalls. There are lots of birds that can exist in long recorded audio. So considering these cases, we need to build a noise-robust, multi-label audio classifier. . We are going to introduce a deep learning architecture used by our team (Dragonsong) in Cornell Bird Call Identification Kaggle Challenge. . Architecture . We built a novel audio classifier architecture that catches time-series features effectively by utilizing CNN, RNN and attention modules. Here is our brief plot of architecture used at the Cornell Birdcall Identification Challenge. . . Fig 5. Our architecture of birdcall classifier We process a raw audio with a log-mel spectrogram as an input of our architecture, and it passes through the ResNeSt50 backbone, which is one of the image classification architectures. Then, we take the features, which contain both spatial and temporal information, to the RoI (Region of Interest) pooling and bi-GRU layers. In the layers, it catches the time-wise information again while reducing the feature dimension because we thought of extracting temporal features are crucial to classify lots of bird calls in long audio. Lastly, we pass the information into the attention module to score by each time step to find out which time step the birds exist. . Training the model . Not only building deep learning architecture to represent the data but also how to train the model is crucial (a.k.a training recipe). To classify audios that contain multiple bird calls in a noisy environment, we mix multiple bird calls into audio and noises like white noise. Also, regarding lots of variation of bird calls, we augment time and pitch and mask some audio frames by using SpecAugment. Here is a short example of what we applied augmentations. . import IPython.display as ipd ipd.Audio(&#39;img-kim/mixed.wav&#39;) . Your browser does not support the audio element. Fig 6. Augmented sample. The mixed version of Alder Flycatcher and American Avocet. As a result, we can achieve an outperform score on the Kaggle challenge. . Summary . Have you ever woken up without understanding what it was, but knowing for sure that some sound isn&#39;t right? With good algorithms, machines will be able to identify what it was and help you sleep better. Stay tuned! .",
            "url": "https://yourdatablog.com/audio/",
            "relUrl": "/audio/",
            "date": " • Nov 28, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Seeing is Believing",
            "content": "Introduction . Close your eyes and listen to the sound around you. No matter whether you are in a crowded office, cozy home, or open space of nature, you can distinguish the environment with sound around you. One of the five major senses of humans is hearing, so audio plays a significant role in our life. Therefore, being able to organize and exploit values in audio data with deep learning is a crucial process for AI to understand our world. An important task in sound processing is enabling computers to distinguish one sound from another. This capability enables computers to do things ranging from detecting metal wearing in power plants to monitoring and optimizing fuel efficiency of cars. In this post, we will use bird sound identification as an example. We will detect locations of bird calls in recordings produced in natural settings and classify species. By converting audio data to image data and applying computer vision models, we acquired a silver medal (top 2%) in Kaggle Cornell Birdcall Identification challenge. . Treating Audios as Images . When a doctor diagnoses heart problems, he can either directly listen to the patient’s heartbeat or look at the ECG, a diagram that describes the heartbeat, of the patient. The former usually takes longer - it takes time for the doctor to listen - and harder - memorizing what you heard can be hard. In contrast, visual perceptions of ECG allows a doctor to absorb spatial information instantly and accelerates the tasks. . The same rationales apply to our sound detection tasks. Here are four audio clips and corresponding spectrograms of four bird species. Even human eyes can see the differences between species instantly based on color and shapes. . . import IPython.display as ipd ipd.Audio(&#39;img-tony/amered.wav&#39;) . Your browser does not support the audio element. ipd.Audio(&#39;img-tony/cangoo.wav&#39;) . Your browser does not support the audio element. ipd.Audio(&#39;img-tony/haiwoo.wav&#39;) . Your browser does not support the audio element. ipd.Audio(&#39;img-tony/pingro.wav&#39;) . Your browser does not support the audio element. Going over the audio waves through time takes more computational resources, and we can acquire more information from the 2-dimensional data of images than 1-dimensional waves. In addition, the recent rapid development of computer visions, especially with the help of Convolutional Neural Network (CNNs), can significantly benefit our approach if treating audios as images as we (along with pretty much everyone) did in the competition. . Understanding Spectrogram . The specific image representation that we use is called a spectrogram: a visual representation of the spectrum of frequencies of a signal as it varies with time. . Sounds can be represented in the forms of waves, and waves have two important properties: frequency and amplitude as illustrated in the picture below. The frequency determines how the audio sounds like, and amplitude determines how loud the sound is. . . In a spectrogram of an audio clip, the horizontal direction represents time, and the vertical direction represents different frequencies. Finally, the amplitude of sounds of a particular frequency exists at a particular point of time is represented by the color of the point, resulting from the corresponding x-y coordinates. . . To more intuitively see how frequencies are embodied in spectrograms, here’s a 3D visualization, which demonstrates the amplitude with an extra dimension. Again, the x-axis is time, and y-axis is the value of frequencies. The z-axis is the amplitude of sounds of the frequency of y-coordinate at the moment of the x-coordinate. As the z-value increases, the color changes from blue to red, which results in the color we saw in the previous example of a 2D spectrogram. . . Spectrograms are helpful because they extract exactly the information we need: frequencies, the features that shape the form of sound we hear. Different bird species, or actually all objects that produce sound, have their own unique frequency range so that their sounds appear to be different for our ears. Our model will simply need to master distinguishing between frequencies to achieve ideal classification results. . Mel Scale and Mel Scale Spectrogram . However, human ears do not perceive differences in all frequency ranges equally. As frequencies increase, it is more difficult for us to distinguish between different frequencies. In order to better emulate human ear behaviors with deep learning models, we measure frequencies in mel scale. In the mel scale, any equal distance between frequencies sound equally different for human ears. mel scale converts frequency from in Hertz (f) to in mel (m) with the following equation: . . A mel scale spectrogram is simply a spectrogram with frequencies measured in mel. . How do We Use Spectrogram? . To create a mel spectrogram from audio waves, we will employ librosa library. . import librosa import numpy as np y, sr = librosa.load(&#39;img-tony/amered.wav&#39;, sr=32000, mono=True) melspec = librosa.feature.melspectrogram(y, sr=sr, n_mels = 128) melspec = librosa.power_to_db(melspec).astype(np.float32) . Where y denotes the raw wave data, sr denotes sample rate of the audio sample, and n_mels decides the number of mel bands in the generated spectrogram. When using melspectrogram method, you can also set f_min and f_max method You can also set Then, we can convert mel spectrogram that express amplitude in amplitude squared scale to decibel scale with the power_to_db method. . To visualize the generated spectrogram, run . import librosa.display librosa.display.specshow(melspec, x_axis=&#39;time&#39;, y_axis=&#39;mel&#39;, sr=sr, fmax=16000) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f49d0022b90&gt; . Alternatively, if you are using GPU, you can accelerate the mel spectrogram generation process with torchlibrosa library. . is_gpu = False #For demonstration purpose, is_gpu is set to False. Change is_gpu to True when using torchlibrosa. if is_gpu: from torchlibrosa.stft import Spectrogram, LogmelFilterBank spectrogram_extractor = Spectrogram() logmel_extractor = LogmelFilterBank() y = spectrogram_extractor(y) y = self.logmel_extractor(y) . Summary . In conclusion,we can take advantages from recent developments in computer vision in audio-related tasks by converting audio clips into image data. We achieve so with spectrograms that exhibit frequency, amplitude, and time information of audio data in an image. Using mel scale and mel scale spectrogram helps computers to emulate human hearing behaviors of distinguishing sounds of different frequencies. To generate spectrograms, we could employ librosa library, or torchlibrosa for GPU acceleration, in Python. By treating audio-related tasks in such a way, we are able to establish efficient deep learning models to identify and classify sounds, like how doctors diagnose heart-related diseases with ECG. .",
            "url": "https://yourdatablog.com/audio2images/",
            "relUrl": "/audio2images/",
            "date": " • Nov 21, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "How to parse mp3 as an array of wave data",
            "content": "In this short post we will share our experiences on working with sound data from python - applying Fourier Transfort to wave data from mp3 and use of some predefined filter. We will use FFMPEG (https://ffmpeg.zeranoe.com/builds/) which you need on your PC and in Jupyter, as well as PDUD and noise reduction technologies from (https://pypi.org/project/noisereduce/) . As usual, if you want to play with the notebook - do that on colab or github. . So, say you have a mp3 which contains data you need to process - in can be sound of a machine working, say you want to see if you can detect malfunctions from its sound - or a bird song. If you get a massive ammount of sounds - it is probably in mp3. We will load it via pydub. . #works with local data filename = &quot;../data/datasets_847828_1448297_birdvox_wav_00162d26-57e6-4924-a247-5f58963f1403.wav&quot; disk_file = open(filename, &#39;rb&#39;) sound = pydub.AudioSegment.from_file(disk_file, format=&#39;wav&#39;) samples = sound.get_array_of_samples() # get the frame rate sample_rate = sound.frame_rate # get amount of bytes contained in one sample sample_size = sound.sample_width # get channels channels = sound.channels disk_file.close() print(&quot;Channels: &quot;, channels, &quot;Width: &quot;, sample_size, &quot;Rate: &quot;, sample_rate) . Channels: 1 Width: 2 Rate: 44100 . You can see visualize it on a plot - your samples are in an array. . #create a time variable in seconds time = np.arange(0, float(len(samples)), 1) / sample_rate #plot amplitude (or loudness) over time plt.plot(time, samples, linewidth=0.01, alpha=0.7, color=&#39;#ff7f00&#39;) plt.xlabel(&#39;Time (s)&#39;) plt.ylabel(&#39;Amplitude&#39;) plt.show() . And now we can do apply fourier transform . from numpy import fft as fft fourier=fft.fft(samples) n = len(samples) fourier = fourier[0:(int(n/2))] fourier = fourier / float(n) freqArray = np.arange(0, (int(n/2)), 1.0) * (sample_rate*1.0/n); plt.plot(freqArray/1000, 10*np.log10(fourier), color=&#39;#ff7f00&#39;, linewidth=0.02) plt.xlabel(&#39;Frequency (kHz)&#39;) plt.ylabel(&#39;Power (dB)&#39;) plt.show() . C: ProgramData Anaconda3 lib site-packages numpy core _asarray.py:83: ComplexWarning: Casting complex values to real discards the imaginary part return array(a, dtype, copy=False, order=order) . Pxx, freqs, bins, im = plt.specgram(samples, Fs=sample_rate, NFFT=1024, cmap=plt.get_cmap(&#39;autumn_r&#39;)) cbar=plt.colorbar(im) plt.xlabel(&#39;Time (s)&#39;) plt.ylabel(&#39;Frequency (Hz)&#39;) cbar.set_label(&#39;Intensity dB&#39;) plt.show() . Say, you want to pick a frequency and visualize its amplitude . #pick a frequency i = 250 singlefqcy=Pxx[i,:] plt.xlabel(&#39;Time (s)&#39;) plt.ylabel(&#39;Amplitude&#39;) plt.title(&#39;Amplitude for freq {:.2f}kHZ&#39;.format(freqs[i]/1000)) plt.plot(bins, singlefqcy, color=&#39;#ff7f00&#39;) . [&lt;matplotlib.lines.Line2D at 0x1f93a1d7f48&gt;] . Now, let us reduce noise using noisereduce library . import noisereduce as nr fconverter = lambda a : a / 32767.0 converted = fconverter(np.asarray(samples, dtype = np.float64)) reduced_noise = nr.reduce_noise(audio_clip=converted, noise_clip=converted, verbose=False) . C: ProgramData Anaconda3 lib site-packages noisereduce noisereduce.py:5: TqdmExperimentalWarning: Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console) from tqdm.autonotebook import tqdm . And check that noise is reduced on Fourier Transform results . fourier=fft.fft(reduced_noise) n = len(reduced_noise) fourier = fourier[0:(int(n/2))] fourier = fourier / float(n) freqArray = np.arange(0, (int(n/2)), 1.0) * (sample_rate*1.0/n); plt.plot(freqArray/1000, 10*np.log10(fourier), color=&#39;#ff7f00&#39;, linewidth=0.02) plt.xlabel(&#39;Frequency (kHz)&#39;) plt.ylabel(&#39;Power (dB)&#39;) plt.show() . C: ProgramData Anaconda3 lib site-packages numpy core _asarray.py:83: ComplexWarning: Casting complex values to real discards the imaginary part return array(a, dtype, copy=False, order=order) . And now you can write the noise reduced file to output. . import scipy.io.wavfile scipy.io.wavfile.write(&#39;../output/test-out2.wav&#39;,sample_rate,reduced_noise) . Copyright &copy; Dmytro Karabash, Maxim Korotkov; 2020. This notebook is licensed under a Creative Commons Attribution 4.0 International License. .",
            "url": "https://yourdatablog.com/audio2/",
            "relUrl": "/audio2/",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Organizational performance explained with Game of Thrones",
            "content": "KPI, OKR, MBO, etc. Managers seem to like 3-letter abbreviations. Let&#39;s make them easy to remember. So, what is a Key Performance Indicator (KPI)? KPI&#39;s have been here for ages, and they are just about setting up quantifiable parameters and measuring those. It can be used as objectives for organization units or team members. What parameter can be measured when we look at the Battle of the Blackwater (from the side of King&#39;s Landing - Cersei seems profound in management techniques)? If you don&#39;t know what I&#39;m talking about, I suggest you close the article right here - otherwise, read on. So let&#39;s look first at the parameter she is interested in - it is the percentage of Stannis Baratheon ships destroyed by the wildfire. It is an essential parameter for the protecting army in King&#39;s Landing. And it is nicely cascaded downwards. The group target is set (while the outcome is slightly lower). . . Can this one be a Key Performance Indicator for your organization? Unless you run such battles on a recurrent basic (and they didn&#39;t do that even in Seven Kingdoms) - I would not refer to it as a KPI. You would like to use KPIs to monitor organization performance and improve it over periods, and this one is a unique project. You can have Project KPIs, but I suggest sticking with the name Project Metrics. Advanced reader note - terms you use do not matter. You can have project KPIs in your organization. What matters is that you don&#39;t confuse different management tools and use them only for what they are. Project Metrics are parameters set on a project level, measured throughout its execution, and reviewed at project retrospective or lessons learned. . Let&#39;s move to the North and set some KPIs for Night Watch. Quickly for those who&#39;ve forgotten: there are Seven Kingdoms, and the Wall built 8000 years ago. North or the Wall, there are bad things - wildling, giants, White Walkers maybe. The Night Watch aims to guard the Wall to keep the wildlings and White Walkers from crossing into the Seven Kingdoms. So, what can we measure: . . Is this a set of KPIs for the Night Watch organization? It can be. . Do organizations need KPIs? Yes, especially the bigger ones. The larger organization is, the more it will get focused on KPIs. How do you get your KPIs? You know your department goal: Consultancy unit aims to generate Profit by delivering Professional Services, Night Watch aims to kill wildling and White Walkers. Then you set up a measurement system to capture this performance and cascade it—pure, straightforward, top-down. . Now, you are a Lord Commander sitting in Castle Black, and you need to cascade the KPIs we&#39;ve mentioned above. Are they good ones? Think of them for a second. How will you measure it and make it transparent? You are a new generation Lord Commander and set up bonuses for your Leadership Team and the Watch&#39;s members. The Oath is &quot;I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post...&quot; but nothing about &quot;I shall take no performance-based yearly bonus.&quot; Can you set up a yearly bonus based on the parameters above and reflect your leaders&#39; performance? Let&#39;s focus on Rangers first (they fight, defend the Wall, and patrol the Haunted Forest). Well, if you just take numbers above, every leader gets the same KPI (because those are measured globally). Moreover, how do you know how many White Walkers are out there? Adjustment required. . You get some ale, think, and develop a KPI cascade. You end up with individual KPIs like: . . The second KPI is loosely aligned with the organizational objective, and that&#39;s what typically happens in organizations. Leadership KPIs are based on their team averages (e.g., 60% of bonus) and organization KPIs (40% of bonus then). So, years pass, and your team knows that their yearly bonus depends on those KPIs. You get different types of performers. Some truly follow your Vision Statement (&quot;I am the sword in the darkness. I am the watcher on the walls. I am the shield that guards the realms of men.&quot;), but most do not. For those, you observe two behaviors (or a combination of both). Some rangers will go to patrol, take some ale (should we prohibit it during working hours?), and camp a few miles outside. They get patrol KPIs high, and Leadership closes its eyes on that - because their bonus goes up as well. Some will want to be heroes and go kill wildlings in crazy numbers, doing a lot of overtime (that&#39;s not what you&#39;ve wanted, but it helps to promote the company image and hire recruits). Some will raid into the North, kill villagers and present them as wildlings. If you find out, you classify it as not-compliance and apply sanctions (up to execution). . And such an organization works well as long as times are not too turbulent. How? Your individual KPIs are loosely aligned to the organization&#39;s objective, but they are somewhat aligned. There are a lot of camps around (you cap performance component at 200% percent, so it makes sense to patrol a lot), so you are likely to spot a White Walker. Wildlings go deeper into the woods and thus are not trying to cross the Wall either. In a more volatile environment, when you need to innovate because of changing business settings, your organization appears less efficient. . Peter Drucker, in his 1954 book The Practice of Management, proposed an approach called Management by Objectives (MBO). You&#39;re a Lord Commander, and you have not read that, but Maester referred you to something similar from a thousand years back. You don&#39;t want to rely solely on KPIs in appraisals (as too many members seem to do nearly nothing valuable and still get to 100%). You want to reward performance based on objectives that every sworn brother agrees to individually - so make this process more tailor-made. . You split your brotherhood into the Rangers, the Builders, and the Stewards with 3 Leaders (First Ranger, First Builder, and First Steward). You&#39;ve seen giants yourself, and they are enormous. So you talk to the First Builder and agree on specific objectives: . . Such objectives allow the Leadership team to cascade it further in a way that is tailored to their groups or team members, each having their strengths and weaknesses. You no longer set up the same KPIs within a unit, but you align on every individual&#39;s objective on a yearly meeting. Now you are even more competent Lord Commander - you Manage by Objectives. Brothers define objectives together with their leaders aligned with their skills and interests, and your organization grows. First Ranger also takes a more tailor-made set of objectives: . . What&#39;s the issue now? Well, typically, your Objectives are defined between a team member and his boss and are not shared around (exceptions possible), and you set them in a way that reaching 100% is possible with reasonable effort. But the White Walkers have been spotted, and you have no clue how to kill those guys. . You are in an even more volatile environment - you probably have to innovate now, and what you need is Objectives and Key Results (OKR). The concept was introduced by Andrew Grove, former CEO of Intel, in the early 1980s. OKRs were popularized by Google using them from the beginning (you have no clue who Andrew Grove is, probably a wise Maester from the past). OKRs are similar to Objectives you used to set up before, with few key differences: . OKRs are transparent (everyone can see all OKRs) | OKRs are set to be challenging (so reaching 100% or all of them is hard) - 70% is already good | OKRs are reviewed more often (quarterly) | OKRs specify not only &quot;what&quot; (Objective) but also &quot;how&quot; (Key Result) | OKRs are not linked to compensation (Bullshit statement - indeed your boss knows how you are doing, so they may not be linked directly, but your package depends on how well you perform on OKRs) You could do everything from above within the MBO framework and never mention an OKR. OKR is a specific way to set up objectives and some adjustments to a technique, not something to replace Management by Objectives entirely. | . Now we are talking. You Maester gets an OKR for this quarter, and your First Ranger also gets one. . . Those are not that easily reachable and will put quite some challenges. In most organizations, you get OKRs where a percentage of completion can be measured, but you can also get a list of more qualitative ones. So now, you can handle innovation better, and your organization strives to grow from inside. Just don&#39;t forget your Vision Statement &quot;I am the fire that burns against the cold, the light that brings the dawn, the horn that wakes the sleepers, the shield that guards the realms of men.&quot; . Copyright &copy; Maxim Korotkov; 2020. This article is published under a Creative Commons Attribution 4.0 International License. .",
            "url": "https://yourdatablog.com/kpisandokrs/",
            "relUrl": "/kpisandokrs/",
            "date": " • Jun 6, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Use Data Science to Handle Enterprise Resource Planning Data with Ease",
            "content": "Introduction . You’re a boss now. You have a team or a business unit doing consultancy. Probably a bunch of Consultants helping clients, some Project Managers leading your projects in a nice Agile or whatever way. Everyone fills their timesheets (and you cut their bonuses if they don’t) – the time is billed to clients, and you have Fixed Fee projects as well. Maybe smaller teams being parts of your organization also – you can lead ten, a hundred or a thousand people (hey, dude – you run a unit of 1000 employees? Don’t read this article – hire someone who did). You probably even have an ERP (Enterprise Resource Planning) or something and a CFO in a lovely corner office. Do you have an excellent way to estimate how much profit every team member and project brings and ways to predict it with reasonable precision? If you have a decent ERP dashboard which gives you all that – then you’re lucky, and you don’t need this article either. The chances are that you get a simple calculation end of the year – like “let’s take all revenue finance recognized on your projects in a year and man day cost at USD 800 to get your unit profitability”. USD 800 can seem crazily high or unacceptably low, depending on the business you’re in. So that’s the precision you have to count the money your team brings to the firm? Do we need to remind you that this is one of the reasons why your job exists? . What else can you get? All the timesheets projects with their budgets, and you can even get to approximate costs (let’s discuss it later) — a shitload of data for a year, even for a team of 10. What we show is that you don’t need an ERP to do the rest – the notebook in Jupyter will do. Keep this in mind - management starts with measurement. How can you supervise your team and projects if you don’t have their data at your fingers? . Why do you need Data Science here? Well, you can have all data at your fingers. Eventually, you would want to calculate your profit like . profit = revenue - cost . Not only as subtracting two numbers, but also on the level of tables - so the output of the above statement can be a table with profit per consultant per month, like this: . profit . 2020-02 2020-03 . CATHY THE NEW MANAGER 6187.50 | 8006.25 | . FRANK THE CONSTULANT 8050.00 | 3762.50 | . Or get a list of 3 people with most billable hours in March via the following statement . t.where(t[&#39;Billable&#39;] &amp; (t[&#39;month&#39;] == &#39;2020-03&#39;) ).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . The code above is indeed not executable, but we promise to get you there in a few paragraphs. And yes, there is some learning of python required. The huge difference from anything else you’ve been doing yourself (ERP reports, Excel, other tools) is that any analysis stays in the notebook and can be re-applied after your data changes. . Data Science . So, let’s get this done. First – yes, you need to know a bit of python to get the files in. The basic level will do. If you are a manager in 2020 and can’t write a simple script – hmm, you probably missed something. The objective is not to build an ERP and not even to have an easy-to-use toolkit - we want to show you how to make a toolkit for yourself (but feel free to reuse our code). What you will see is a straightforward set of examples - spend an hour or two to load your files into the notebook and then start playing with it - just make the analysis you want. You can end up checking a few numbers or building your charts and dashboards. It is ok, even if you work for a corporation (that’s where you need it most) - just install Anaconda and download the notebook. So, we first get and transform our input files (if you want to follow text AND all the code - read it on colab). . We are loading projects, timesheets, and roles below - more details will follow on what we presumed is inside. Note - files are loaded from the GitHub repository so that they will open in colab or your local machine just the same. . data = {} data_path = &#39;https://raw.githubusercontent.com/h17/fastreport/master/data/&#39; url = data_path + &#39;roles.csv&#39; data[&#39;roles&#39;] = pd.read_csv(url, index_col=0, sep=&quot;;&quot;) url = data_path + &#39;project_data.xlsm&#39; project_data = pd.ExcelFile(url) project_data.sheet_names . [&#39;TS Feb&#39;, &#39;TS Mar&#39;, &#39;TS Apr&#39;, &#39;Projects&#39;, &#39;Employees&#39;] . Don’t focus too much on the next code block - we have monthly timesheets in separate tabs and need to stack them one on top of another. Plus - we have errors in excel (Sat.1 column) - data cleanup is also required, quite usual for those who touched data science. Collapsed blocks in our notebook contain the code, which is not critical for understanding. If you’d rather read it all, we suggest you switch to either GitHub or colab, so you can also play with it. . # collapse timesheets = [] for sheet in project_data.sheet_names: if &#39;TS&#39; in sheet: timesheets += [pd.read_excel(project_data, sheet, header=2)] else: tmp = pd.read_excel(project_data, sheet) data[sheet] = tmp if &#39;Sat.1&#39; in timesheets[0]: # cleaning from Sat.1 timesheets[0] = timesheets[0].rename( columns={&#39;Sat&#39;: &#39;Sun&#39;, &#39;Sat.1&#39;: &#39;Sat&#39;}) data[&#39;timesheet&#39;] = pd.concat(timesheets, sort=False) d = {&#39;Billable&#39;: True, &#39;Non-Billable&#39;: False} data[&#39;timesheet&#39;][&#39;Billable&#39;] = data[&#39;timesheet&#39;][&#39;Billing&#39;].replace(d) data[&#39;timesheet&#39;].drop([&#39;Billing&#39;], axis=1, inplace=True) data[&#39;timesheet&#39;] = data[&#39;timesheet&#39;][~data[&#39;timesheet&#39;].User.isnull()] . . So, let&#39;s see what we&#39;ve got here: . data.keys() for key in data.keys(): string_format = &quot;{:20} shape: {:&gt;10} rows t and {:&gt;10} columns&quot; print(string_format.format(key, *data[key].shape)) . dict_keys([&#39;roles&#39;, &#39;Projects&#39;, &#39;Employees&#39;, &#39;timesheet&#39;]) . roles shape: 8 rows and 4 columns Projects shape: 48 rows and 10 columns Employees shape: 35 rows and 5 columns timesheet shape: 1792 rows and 14 columns . Data we loaded . Let us summarize it here – most probably if you are a team leader or business unit manager – you can get . Dictionaries Cost per region or default cost for “outside” contributors | Average revenue per hour for projects not “owned” by you | . | . # show roles roles = data[&quot;roles&quot;] roles . Seniority EU US UK . Position . Unit Head SENIOR | 1100 | 1300 | 1200 | . Program Manager EXPERIENCED | 900 | 1000 | 900 | . Project Manager SENIOR | 800 | 800 | 800 | . ... ... | ... | ... | ... | . Consultant SENIOR | 800 | 800 | 900 | . Consultant EXPERIENCED | 550 | 550 | 550 | . Consultant JUNIOR | 500 | 500 | 500 | . 8 rows × 4 columns . We need to set default values and bring it to format easy to use, which is very easy in python: . default_revenue = 1200 default_cost = 850 # wide to long format roles_long = pd.melt(roles.reset_index(), id_vars=[&#39;Position&#39;, &#39;Seniority&#39;], var_name=&#39;region&#39;, value_name=&#39;cost&#39;) roles_long . Position Seniority region cost . 0 Unit Head | SENIOR | EU | 1100 | . 1 Program Manager | EXPERIENCED | EU | 900 | . 2 Project Manager | SENIOR | EU | 800 | . ... ... | ... | ... | ... | . 21 Consultant | SENIOR | UK | 900 | . 22 Consultant | EXPERIENCED | UK | 550 | . 23 Consultant | JUNIOR | UK | 500 | . 24 rows × 4 columns . HeadCount List of your employees, with their grades (or costs) | Engagement model (employee or contractor) | . | . # show head count headcount = data[&quot;Employees&quot;] headcount = headcount.merge( roles_long[[&#39;Position&#39;, &#39;Seniority&#39;, &#39;region&#39;, &#39;cost&#39;]], how=&#39;left&#39;, left_on=[&#39;Seniority&#39;, &#39;Position&#39;, &#39;Country&#39;], right_on=[&#39;Seniority&#39;, &#39;Position&#39;, &#39;region&#39;]) headcount[&#39;cost&#39;] = headcount[&#39;cost&#39;].fillna(default_cost) headcount . Name Engagement Country Position Seniority region cost . 0 JANE DOE | STAFF | US | Consultant | EXPERIENCED | US | 550.00 | . 1 JOHN DOE | STAFF | FR | Consultant | JUNIOR | NaN | 850.00 | . 2 JOHN SMITH | STAFF | US | Consultant | EXPERIENCED | US | 550.00 | . ... ... | ... | ... | ... | ... | ... | ... | . 32 JOHN THE CONSULTANT | STAFF | FR | Consultant | EXPERIENCED | NaN | 850.00 | . 33 JANE THE MANAGER | CONTRACTOR | BE | Project Manager | SENIOR | NaN | 850.00 | . 34 JACK THE EXPERT | STAFF | BE | Consultant | SENIOR | NaN | 850.00 | . 35 rows × 7 columns . Projects with budgets, effort estimates, dates, types of revenue recognition (Time and Material, Fixed Fee or something else), et cetera | . # show projects projects = data[&quot;Projects&quot;] projects . Client ID Project ID Project PM Region Start End Funding Daily Rate TCV . 0 13154 | 68454 | Medium consutancy 1 | SUSAN THE MANAGER | Europe | 2019-01-16 08:00:00 | 2020-07-22 14:00:00 | Time and Materials | 1200 | 39,000 USD | . 1 2764 | 70285 | Our biggest project | EXT 6a8e0ca747 | Europe | 2019-10-01 08:00:00 | 2021-04-30 11:00:00 | Time and Materials | 1200 | 1,450,000 USD | . 2 12916 | 68093 | Upgrade to new version | TIM THE LEAVER | Europe | 2018-09-28 08:00:00 | 2020-04-27 17:00:00 | Fixed Fee | 1200 | 127,500 USD | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 45 12899 | 63852 | Huge consultancy pool | JACK THE MANAGER | Europe | 2017-08-01 08:00:00 | 2020-04-27 17:00:00 | Time and Materials | 1200 | 198,000 USD | . 46 12901 | 71248 | Small upgrade | JACK THE MANAGER | Europe | 2020-01-29 08:00:00 | 2020-12-31 17:00:00 | Time and Materials | 1200 | 108,000 USD | . 47 17719 | 70618 | Small consultancy pool | SUSAN THE MANAGER | Europe | 2019-11-06 08:00:00 | 2020-06-30 17:00:00 | Time and Materials | 1200 | 27,200 USD | . 48 rows × 10 columns . Timesheets for your team / your projects. It is possible that other teams can contribute to your projects and your team might work in outside projects Typically arrive monthly or weekly | (optional) Planned effort There might be none, in one of the next posts we&#39;ll talk about autofill | . | . | . # show timesheets timesheet = data[&quot;timesheet&quot;] timesheet . Project Activity User Period Starting Effort Type Total (Days) Sun Mon Tue Wed Thu Fri Sat Billable . 0 PRJ f74fe3647d | Consultancy | EXT 800982ab08 | 2020-02-02 | Actual | 2.50 | 0.00 | 0.50 | 0.50 | 0.50 | 0.50 | 0.50 | 0.00 | True | . 1 PRJ f74fe3647d | Consultancy | EXT c8c92ca432 | 2020-02-02 | Actual | 2.50 | 0.00 | 0.50 | 0.50 | 0.50 | 0.50 | 0.50 | 0.00 | True | . 2 PRJ f74fe3647d | Consultancy | EXT c8c92ca432 | 2020-02-09 | Actual | 2.50 | 0.00 | 0.50 | 0.50 | 0.50 | 0.50 | 0.50 | 0.00 | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 620 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-12 | Actual | 1.00 | 0.00 | 0.50 | 0.00 | 0.50 | 0.00 | 0.00 | 0.00 | True | . 621 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-19 | Actual | 1.00 | 0.00 | 0.50 | 0.00 | 0.00 | 0.50 | 0.00 | 0.00 | True | . 622 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-26 | Reported | 1.50 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | nan | nan | True | . 1792 rows × 14 columns . EXT users here are outside of our headcount (let’s say we are not getting the real names, but rather some ids from ERP in such case) . Why not just have things done by ERP? Your ERP probably does not present you anything nicely in terms of parameters you’d want to control on your level (otherwise, you won’t read this anyway). There may be a project running to improve it by 2025 - maybe one of the Big4 firms is interviewing you for requirements. If you are steering this boat long enough – you might have ended up with quick and dirty calculation, SQL queries to SAP (with field names still in German), or an Excel file. Why? Your bosses don’t care – they already hired you, and a better ERP is coming in 2025 anyway. So they want to know how much money your team makes (preferably - per person, per month, per project, with charts, projections, and comparisons) and to know why it is not so profitable (because it never is). . To simplify your way forward we are going to create a timeseries out of timesheets which is a bit more involved so you can skip it for now and come back to it later, but the point is that at the end you will get a lovely monthly pandas DataFrame that looks like this . # collapse dd = [] timesheet[&#39;Period Starting&#39;] = pd.to_datetime(timesheet[&#39;Period Starting&#39;]) weekdays = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;] for i, weekday in enumerate(weekdays): columns = [col for col in timesheet if col not in weekdays or col == weekday] tmp = timesheet[columns].copy() tmp = tmp.rename(columns={weekday: &#39;effort&#39;}) tmp[&#39;date&#39;] = tmp[&#39;Period Starting&#39;]+pd.to_timedelta(&#39;{}D&#39;.format(i)) tmp[&#39;weekday&#39;] = weekday tmp = tmp.drop([&#39;Period Starting&#39;, &#39;Total (Days)&#39;], axis=1) dd += [tmp] timeseries = pd.concat(dd, sort=False).sort_values([&#39;User&#39;, &#39;date&#39;]) timeseries = timeseries.reset_index().drop(&#39;index&#39;, axis=1) timeseries[&#39;date&#39;] = pd.to_datetime(timeseries[&#39;date&#39;]).astype(&#39;str&#39;) timeseries[&#39;month&#39;] = timeseries[&#39;date&#39;].str[:7] def isweekend(x): return x in [&#39;Sun&#39;, &#39;Sat&#39;] timeseries[&#39;weekend&#39;] = timeseries[&#39;weekday&#39;].apply(isweekend) timeseries[&#39;workweek&#39;] = ~timeseries[&#39;weekday&#39;].apply(isweekend) timeseries . . Project Activity User Effort Type effort Billable date weekday month weekend workweek . 0 Upgrade in two contracts - 1 | Consultancy | CATHY THE NEW MANAGER | Actual | 0.00 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 1 Upgrade in two contracts - 2 | Consultancy | CATHY THE NEW MANAGER | Actual | 0.00 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 2 A pilot for huge opportunity | Consultancy | CATHY THE NEW MANAGER | Actual | 0.00 | True | 2020-02-16 | Sun | 2020-02 | True | False | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 12541 Strategic project in a new region | Project Management | TOM THE TEAM LEADER | Reported | nan | True | 2020-05-01 | Fri | 2020-05 | False | True | . 12542 Strategic project in a new region 2 | Consultancy | TOM THE TEAM LEADER | Actual | nan | False | 2020-05-02 | Sat | 2020-05 | True | False | . 12543 Strategic project in a new region | Project Management | TOM THE TEAM LEADER | Reported | nan | True | 2020-05-02 | Sat | 2020-05 | True | False | . 12544 rows × 11 columns . It is common in data science to have one big DataFrame (similar to excel tab or SQL table) that you can group and filter easily. It is helpful because it makes things very easy. . Profitability . Timesheets and project budgets are simplified this way, and you can manipulate them the way you want in a few simple statements. If you studied excel formulas - you could do this also. Now, let’s look at profitability in the most straightforward manner possible. As a manager, we suggest you do that to set benchmarks for your team. So, profit is $$ mbox{Revenue  –  Cost}$$ and we intend to keep it simple. You can implement the calculations you like. . Revenue: Let’s say that for a Time &amp; Material project, you generate as much revenue as you bill (on agreed rate) up to its budget. We are not doing any Fixed Fee recognition formula. Different companies do it differently, and you’ll either need historical data or actual recognized value depending on how you operate. . We also assume that we are interested only by users in our headcount (so we filter out all EXT users). . # revenue calculation for a person for a month # (SUM REV of all timesheet records * corresp project rates) revenue_df = timeseries[[&#39;User&#39;, &#39;Project&#39;, &#39;Billable&#39;, &#39;effort&#39;, &#39;date&#39;, &#39;month&#39;]] revenue_df = revenue_df.merge(projects[[&#39;Project&#39;, &#39;Daily Rate&#39;]], how=&#39;left&#39;, on=&#39;Project&#39;) revenue_df[&#39;Daily Rate&#39;].fillna(default_revenue, inplace=True) revenue_df = revenue_df[(revenue_df[&#39;User&#39;].str[:3] != &#39;EXT&#39;) &amp; (revenue_df[&#39;Billable&#39;])] revenue_df[&#39;daily_revenue&#39;] = revenue_df[&#39;Daily Rate&#39;] * revenue_df[&#39;effort&#39;] revenue = revenue_df.groupby([&#39;User&#39;, &#39;month&#39;])[ &#39;daily_revenue&#39;].sum().unstack().fillna(0) revenue = revenue[revenue.sum(1) &gt; 0] revenue.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 11550.00 | 19350.00 | 9412.50 | 0.00 | . FRANK THE CONSTULANT 15750.00 | 12425.00 | 14875.00 | 0.00 | . IVAN THE PROGRAMMER 25062.50 | 29043.75 | 25643.75 | 0.00 | . JACK THE EXPERT 29093.75 | 31331.25 | 24843.75 | 0.00 | . JACK THE MANAGER 24090.62 | 22318.75 | 18821.88 | 0.00 | . We got revenue per month per person. Not too sophisticated, right? . Cost: Let’s start with the fact that just using the “default cost rate” is not enough - whenever margins are under pressure, you should do better. You might have people working in different countries and of totally different levels. Talk to your finance team and get some estimates from them (or make it together). We’d say they owe you that much if you were appointed to run a team or business unit. We will assume below that you managed to get a few grades per Country (see roles). Costs per individual will be nice to have as well. The beauty of this tool (compared to doing Excel by yourself) is that you can just add it - it will be a few lines of code. Let’s calculate direct cost per month: here we check the cost of effort posted on timesheets, presuming they are full - can check per number of working days in a month also and compare. We are not interested in external resources, so we’ll filter them out again. . # cost calculation for a project # (SUM COST of all timesheet records * corresp cost rates - see roles) cost_df = timeseries[[&#39;User&#39;, &#39;Project&#39;, &#39;effort&#39;, &#39;date&#39;, &#39;month&#39;]] cost_df = cost_df.merge(headcount[[&#39;Name&#39;, &#39;cost&#39;]], how=&#39;left&#39;, left_on=&#39;User&#39;, right_on=&#39;Name&#39;) cost_df = cost_df[cost_df[&#39;User&#39;].str[:3] != &#39;EXT&#39;] cost_df[&#39;daily_cost&#39;] = cost_df[&#39;cost&#39;] * cost_df[&#39;effort&#39;] cost = cost_df.groupby([&#39;User&#39;, &#39;month&#39;])[&#39;daily_cost&#39;].sum() cost = cost.unstack().fillna(0) cost = cost[cost.sum(1) &gt; 0] cost.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 5362.50 | 11343.75 | 9332.81 | 0.00 | . FRANK THE CONSTULANT 7700.00 | 8662.50 | 7768.75 | 0.00 | . IVAN THE PROGRAMMER 11481.25 | 12925.00 | 11618.75 | 0.00 | . JACK THE EXPERT 19921.88 | 21621.88 | 18168.75 | 0.00 | . JACK THE MANAGER 11800.00 | 10900.00 | 9600.00 | 0.00 | . Now, we can get to profit per user per month using operations on dataframes. And here it bears some fruit. Profit = revenue - cost. Indeed, it required some data cleanup first - but not too much . profit = revenue - cost profit.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 6187.50 | 8006.25 | 79.69 | 0.00 | . FRANK THE CONSTULANT 8050.00 | 3762.50 | 7106.25 | 0.00 | . IVAN THE PROGRAMMER 13581.25 | 16118.75 | 14025.00 | 0.00 | . JACK THE EXPERT 9171.88 | 9709.38 | 6675.00 | 0.00 | . JACK THE MANAGER 12290.62 | 11418.75 | 9221.88 | 0.00 | . That&#39;s what we&#39;ve promised, right? Ok, second one - people who entered most Billable hours in March . t = timeseries # concatenating just in case you are reading from phone t.where(t[&#39;Billable&#39;] &amp; (t[&#39;month&#39;] == &#39;2020-03&#39;) ).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . User TOM THE EXPERT 26.75 JACK THE EXPERT 25.31 PHILIP THE EXPERT 24.88 Name: effort, dtype: float64 . What else? . Now let’s look at how to apply some python and data science techniques (we will get to more details in our next posts) to data you’ve seen above and how to visualize it nicely. . First, let’s take a PM and visualize revenue on his/her projects per month. . %matplotlib inline pm_selected = &quot;CATHY THE NEW MANAGER&quot; drawdt = revenue.loc[pm_selected].T plt.bar(range(len(drawdt.index)), drawdt.values, color=&quot;green&quot;, width=1, align=&#39;center&#39;, edgecolor=&#39;black&#39;); plt.xticks(range(len(drawdt.index)), drawdt.index); plt.ylabel(&quot;Revenue / month: &quot;+pm_selected); . That was simple. Then, some fun for those who know slightly more advanced python - you can make an interactive chart in few lines, e.g., here we want to make it visual in terms of if the value is above or below the benchmark (works if you copy notebook, is not clickable on the blog) . # collapse %matplotlib notebook # colors of bars def get_colors(v): colors = [] for i in range(len(drawdt.index)): color = &quot;yellow&quot; if (drawdt[i] &lt; v*0.9): color = &quot;red&quot; if (drawdt[i] &gt; v*1.1): color = &quot;green&quot; colors.append(color) return colors # plot drawing def plt_all(isdef, yvalue): if isdef: bcolors = &quot;white&quot; xtitle = &#39;Set value&#39; else: a = np.empty(len(drawdt.index)) a.fill(yvalue) plt.plot(range(len(drawdt.index)), a, color=&quot;black&quot;, alpha=0.5) bcolors = get_colors(yvalue) xtitle = &#39;At ${:.0f}/m is&#39;.format(yvalue) plt.bar(range(len(drawdt.index)), drawdt.values, color=bcolors, width=1, align=&#39;center&#39;, edgecolor=&#39;black&#39;) plt.xticks(range(len(drawdt.index)), drawdt.index) plt.ylabel(&quot;Revenue / month: &quot;+pm_selected) red_patch = mpatches.Patch(color=&#39;red&#39;, label=&#39;loss&#39;) yellow_patch = mpatches.Patch(color=&#39;yellow&#39;, label=&#39;in 10%&#39;) green_patch = mpatches.Patch(color=&#39;green&#39;, label=&#39;profit&#39;) plt.legend(handles=[red_patch, yellow_patch, green_patch], loc=&#39;upper left&#39;, title=xtitle, fontsize=7) plt.gca().set_title(&#39;Click on the plot to set benchmark&#39;) plt_all(True, 0.0) def onclick(event): plt.cla() plt_all(False, event.ydata) plt.gcf().canvas.mpl_connect(&#39;button_press_event&#39;, onclick); . . Ok, as a Team Leader, you might not do that. Sorry. Let’s get some calculations done. First, let’s identify “suspicious” time entered (e.g., a person who has more than three days in a row same effort on a given project and it is not 8 hours) - this is a quick check you do yourself, without asking PMO anything and making this official. I can call this suspicious because nature of our work (and yours might be different - so you look for another pattern) makes it highly unlikely that you do spend the same amount of time on one project a few days in a row (unless you are assigned full time). What you are doing is likely just splitting your working time between your projects in some manner. . # remove the weekend working = timeseries[(timeseries[&#39;workweek&#39;] == True) &amp; (timeseries.Billable)].copy() working = working.groupby([&quot;User&quot;, &quot;Project&quot;, &quot;date&quot;]).sum().sort_index() working[&#39;value_grp&#39;] = (working.effort.diff(1) == 0).astype(&#39;int&#39;) def streak(df): # function that finds streak of 1s: 0,1,1,0,1 -&gt; 0,1,2,0,1 df0 = df != 0 return df0.cumsum()-df0.cumsum().where(~df0).ffill().fillna(0).astype(int) working[&#39;streak&#39;] = streak( working[&#39;value_grp&#39;]) # streak of identical effort result = working[(0 &lt; working.effort) &amp; (working.effort &lt; 1) &amp; (working[&#39;streak&#39;] &gt; 3)].reset_index() result = result[result.User.str[:3] != &#39;EXT&#39;].groupby([&#39;User&#39;, &#39;Project&#39;]).last() result[[&quot;effort&quot;,&quot;date&quot;,&quot;streak&quot;]] . effort date streak . User Project . CATHY THE NEW MANAGER Upgrade in two contracts - 1 0.06 | 2020-03-12 | 6 | . FRANK THE CONSTULANT Upgrade in two contracts - 1 0.12 | 2020-03-05 | 4 | . Upgrade in two contracts - 2 0.12 | 2020-03-05 | 4 | . JACK THE EXPERT Some upgrade project 0.12 | 2020-03-13 | 4 | . JOHN THE CONSULTANT PRJ f8b96bd2c4 0.25 | 2020-04-28 | 6 | . TIM THE LEAVER Big upgrade and rework 0.12 | 2020-03-09 | 4 | . Upgrade to new version 0.12 | 2020-03-10 | 4 | . To be clear, we do not recommend sending emails with the subject “The list of those whose timings are suspicious” based on the above. People will likely change their behaviors, and you might not easily find the next pattern. As a manager, you dig into your data, find insights, and act on them the way you see fit. You do not just tell your teenage kid that now you know where he hides cigarettes, do you? . Use cases . Here are some cases where the above can be helpful - we will look at some of them in our next posts. . Decision-making - e.g. identify top loss-making projects | Identify projects which require management attention - also apply Machine Learning here and identify the projects you&#39;ll pick up yourself | Better analysis of non-billable hours | Identify suspicious behaviors - anomaly detections | Revenue and effort projections based on existing patterns and not highlighting when the plan deviates | Consolidated analytic on demand (e.g. profitability forecast, revenue forecast, unallocated capacity) in case your ERP will not do anything like that | . The point is that loading your data (excel, CSV, TSV - whatever) is simple, and manipulating it is simple - more straightforward than doing it in many excel files and faster than waiting for PMOs. . Stay tuned for our next post. . Copyright &copy; Dmytro Karabash, Maxim Korotkov; 2020. This notebook is licensed under a Creative Commons Attribution 4.0 International License. .",
            "url": "https://yourdatablog.com/teamdata/",
            "relUrl": "/teamdata/",
            "date": " • Jun 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Data Science and Management by Dmytro Karabash . Management and Data Science by Maxim Korotkov . . Have something to add or a comment? Contact us via email . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yourdatablog.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Welcome here. Here is our blog about applying Data Science to Management and related topics. Things you used to rely on ERP or on your PMO doing a report - how those things can be made simple with python, pandas, and jupyter. . POSTS .",
          "url": "https://yourdatablog.com/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
      ,"page5": {
          "title": "Tags",
          "content": "{% if site.categories.size &gt; 0 %} . Contents . {% assign categories = “” | split:”” %} {% for c in site.categories %} {% assign categories = categories | push: c[0] %} {% endfor %} {% assign categories = categories | sort_natural %} . {% for category in categories %} {{ category }} | {% endfor %} . {% for category in categories %} &lt;h3 id =&quot;{{ category }}&quot;&gt;&lt;/i&gt; {{ category }}&lt;/h3&gt; {% for post in site.categories[category] %} {% if post.hide != true %} {%- assign date_format = site.minima.date_format | default: “%b %-d, %Y” -%} &lt;article class=&quot;archive-item&quot;&gt; &lt;p class=&quot;post-meta post-meta-title&quot;&gt;{{post.title}} • {{ post.date | date: date_format }}&lt;/p&gt; &lt;/article&gt; {% endif %} {% endfor %} {% endfor %} . {% endif %} .",
          "url": "https://yourdatablog.com/categories/",
          "relUrl": "/categories/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yourdatablog.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}