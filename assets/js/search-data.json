{
  
    
        "post0": {
            "title": "Data For Teams",
            "content": "Introduction . You’re the boss now. You have a team or a business unit doing consultancy. Probably a bunch of Consultants helping clients, some Project Managers leading your projects in a nice Agile or whatever way. Everyone fills their timesheets (and you cut their bonuses if they don’t) – time is billed to clients and you have Fixed Fee projects also. Maybe smaller teams being parts of your team also – you can lead ten, hundred or thousand people (hey, dude – you run a unit of 1000 employees? Don’t read this article – hire someone who did) You probably even have an ERP or something and a CFO in a nice corner office. Do you have a good way to estimate how much profit every team member and project brings and ways to predict it with good precision? If you have a nice ERP dashboard which gives you all then – then you’re lucky and you don’t need this article either. But high chances are that you get a simple calculation end of year – like “let’s take all revenue finance recognized on your projects in a year and man day cost at USD 800 to get your unit profitability” (USD 800 can seem crazily high or unacceptably low, depending on business you’re in). So that’s the precision you have to the money your team brings to firm? Do we need to remind you that this is the only reason why your job exists? . What you probably have is – all the timesheets, projects with their budget and you can even get to approximate costs nicely (we’ll get there). Shitload of data for a year even for a team of 10. What I will tell you here is that you don’t need an ERP to do the rest – the notebook in Jupyter will do for now. Let’s remember - management starts with measurement. How can you supervise your team and projects if you don’t have their data at your fingers? . Why do you need Data Science here? Well, you can have all data an your fingers. Eventually you would want to calculate your profit like . profit = revenue - cost . No only for numbers, but also on the level of tables, so you get profit per user per month in the output. . Or get list of 3 people with most unbillable hours in April like . t.where(~t[&#39;Billable&#39;] &amp; (t[&#39;Month&#39;]==&#39;2020-04&#39;)).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . And we promise to get you there in a few paragraphs. And yes, there is some learning of python required. The huge difference from anything you&#39;ve been doing yourself (ERP reports, Excel, other tools) is that any analysis stays here in the notebook and can be applied once again after your data changes. . Data Science . So, let’s get this done. First – yes, you need to know a little bit of python to get the files in. Basic level will do. (If you are a manager in 2020 and can’t write a simple script – hm, you probably missed something). The objective is to have an easy-to-use toolkit. We are definitely not developing any ERP here. What you will see is a very simple set of tools - you spend an hour or two to load your files into the notebook and then start playing with it - just make the analysis you want. You can end up checking a few numbers or building your own charts and dashboards. It is all under L-GPL - free to use, even if you work for a corporation (that’s where you need it most) - just install Anaconda and download the notebook. So, we first get and transform our input files (if you want to follow text AND all the code - read it on cohab) . We are loading projects, timesheets and roles below - more details will follow on what we presumed is inside. . data = {} # TODO: URL vs localfiles (localfiles don&#39;t work in colab - so I&#39;d rather go URL) url = &#39;https://raw.githubusercontent.com/h17/fastreport/master/data/roles.csv&#39; data[&#39;roles&#39;] = pd.read_csv(url, index_col=0,sep=&quot;;&quot;) project_data = pd.ExcelFile(&#39;../data/project_data.xlsm&#39;) project_data.sheet_names . [&#39;TS Feb&#39;, &#39;TS Mar&#39;, &#39;TS Apr&#39;, &#39;Entity Project&#39;, &#39;HC&#39;] . Don&#39;t focus too much on below part - we have monthly timesheets in separate tabs and need to stack them one on top of another. Plus - we have errors in excel (Sat.1 column) - data cleanup is also required. As a general rule - collapsed blocks contain the code which is not critical for understanding. If you&#39;d rather read it all - we suggest you click above and switch to either github or colab - so you can play with it also. . #collapse timesheets = [] for sheet in project_data.sheet_names: if &#39;TS&#39; in sheet: timesheets += [pd.read_excel(project_data,sheet,header=2)] else: tmp = pd.read_excel(project_data,sheet) data[sheet] = tmp if &#39;Sat.1&#39; in timesheets[0]: timesheets[0] = timesheets[0].rename(columns={&#39;Sat&#39;: &#39;Sun&#39;, &#39;Sat.1&#39; : &#39;Sat&#39;}) data[&#39;timesheet&#39;] = pd.concat(timesheets,sort=False) d = {&#39;Billable&#39;: True, &#39;Non-Billable&#39;: False} data[&#39;timesheet&#39;][&#39;Billable&#39;] = data[&#39;timesheet&#39;][&#39;Billing&#39;].replace(d) _ = data[&#39;timesheet&#39;].drop([&#39;Billing&#39;], axis=1, inplace=True) data[&#39;timesheet&#39;] = data[&#39;timesheet&#39;][~data[&#39;timesheet&#39;].User.isnull()] #data.keys() . . So, let&#39;s see what we&#39;ve got here . data.keys() for key in data.keys(): print(&quot;{:20} shape: {:^10} rows t and {:^10} columns&quot;.format(key, *data[key].shape)) #data[key].head(5) . dict_keys([&#39;roles&#39;, &#39;Entity Project&#39;, &#39;HC&#39;, &#39;timesheet&#39;]) . roles shape: 9 rows and 5 columns Entity Project shape: 48 rows and 15 columns HC shape: 35 rows and 6 columns timesheet shape: 1792 rows and 14 columns . Data we loaded . Let me summarize it here for you – in any decent firm, if you are a team leader or business unit manager you are involved in merit processes – you can get . Dictionaries Cost per region or default cost for “outside” contributors | Average revenue per hour for projects not “owned” by you | . | . # show roles roles=data[&quot;roles&quot;] #here we&#39;d need to stack it on last 3 countries, for now I&#39;ve used &quot;EU&quot; but that&#39;s wrong roles.head() def_revenue = 1200 def_cost = 850 . Position Level EU UK CH . Position Name . DIRECTOR DIR | SENIOR | 1100 | 1300 | 1100 | . Program Manager PRA | SEASONED | 900 | 1000 | 900 | . Project Manager PRO | SENIOR | 800 | 800 | 800 | . Project Coordinator PRO | SEASONED | 700 | 700 | 700 | . Solution Architect CON | EXPERT | 900 | 1000 | 1050 | . HeadCount List of your employees, with their grades (or costs) | Engagement model (employee or contractor) | . | . #show head count headcount=data[&quot;HC&quot;] # todo: use stacked column instead of EU headcount = headcount.merge(roles[[&#39;Position&#39;,&#39;Level&#39;,&#39;EU&#39;]],how=&#39;left&#39;,left_on=[&#39;Level&#39;,&#39;Position&#39;],right_on=[&#39;Level&#39;,&#39;Position&#39;]) headcount.head(n=5) . NAME TYPE Location Position Level ID EU . 0 JANE DOE | STAFF | CH | CON | SEASONED | 1001 | 550 | . 1 JOHN DOE | STAFF | PL | CON | JUNIOR | 1002 | 500 | . 2 JOHN SMITH | STAFF | CH | CON | SEASONED | 1003 | 550 | . 3 JACK THE MANAGER | CONTRACTOR | CH | PRO | SENIOR | 1004 | 800 | . 4 JOHN THE MANAGER | CONTRACTOR | CH | PRO | SENIOR | 1005 | 800 | . Projects Budget, effort estimate, deadline | Project type (e.g. “On demand support” or “Subscription” will not have any actual deadline to control) - though it is ok if you don’t have it | Type of revenue recognition (Time and Material or Fixed Fee) | . | . # show projects projects = data[&quot;Entity Project&quot;] projects.head(n=5) . Client ID Project ID Project PM Client Region Start End Funding BASE RATE USD TCV Recognized nUSD 2017 effort 2018 effort 2019 effort Jan 2020 Effort . 0 13154 | 68454 | Medium consutancy 1 | SUSAN THE MANAGER | Europe | 2019-01-16 08:00:00 | 2020-07-22 14:00:00 | Time and Materials | 1200 | 39,000 EUR | 41540.0800 | 0 | 0.0 | 180.5 | 21.50 | . 1 2764 | 70285 | Our biggest project | EXT 6a8e0ca747 | Europe | 2019-10-01 08:00:00 | 2021-04-30 11:00:00 | Time and Materials | 1200 | 1,450,999 USD | 473002.0800 | 0 | 0.0 | 1241.5 | 458.25 | . 2 12916 | 68093 | Upgrade to new version | TIM THE LEAVER | Europe | 2018-09-28 08:00:00 | 2020-04-27 17:00:00 | Fixed Fee | 1200 | 127,500 EUR | 142411.5533 | 0 | 0.0 | 0.0 | 0.00 | . 3 12916 | 68094 | Small change on top of upgrade | JOHN THE MANAGER | Europe | 2018-09-28 08:00:00 | 2020-05-11 17:00:00 | Time and Materials | 1200 | 12,500 EUR | 0.0000 | 0 | 0.0 | 0.0 | 0.00 | . 4 18933 | 68726 | Transition from another product | JANE THE MANAGER | Europe | 2019-03-01 08:00:00 | 2020-05-27 16:00:00 | Fixed Fee | 1200 | 143,250 EUR | 132677.3616 | 0 | 0.0 | 525.5 | 5.00 | . Timesheets (your team / your projects, note that other teams can contribute to your projects and your team might work in other projects) Typically arrive monthly or weekly (optional) Plans | If there are no plans, below we talk about an option to “plan auto-fill” | . | . # show timesheets timesheet=data[&quot;timesheet&quot;] timesheet.head(n=5) . Project Activity User Period Starting Effort Type Total (Days) Sun Mon Tue Wed Thu Fri Sat Billable . 0 PRJ d41d8cd98f | Consultancy | EXT 800982ab08 | 2020-02-02 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . 1 PRJ d41d8cd98f | Consultancy | EXT c8c92ca432 | 2020-02-02 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . 2 PRJ d41d8cd98f | Consultancy | EXT c8c92ca432 | 2020-02-09 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . 3 PRJ d41d8cd98f | Consultancy | EXT 800982ab08 | 2020-02-09 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . 4 PRJ d41d8cd98f | Consultancy | EXT c8c92ca432 | 2020-02-16 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . EXT users here are the ones not registered in our HeadCount (let&#39;s say we are not getting the real names, but rather some ids from ERP in such case) . But your ERP probably does not present you anything nicely in terms of parameters you’d want to control on your level (otherwise you won’t read this anyway). There is even maybe a project running so it will do so by 2025. If you are steering this boat long enough – you might have ended up with some quick and dirty calculation, SQL queries to SAP (with field names still in German) or an Excel file. Why? Because, well, your bosses don’t care – they already hired you and a better ERP is coming in 2025 anyway – so they want to know how much money your team makes and why is it not so profitable (because it never is) - preferable you can work with this data so you can make decisions . To simplify our way forward we are going to create a timeseries out of timesheets which is a bit more involved so you can skip it for now and come back to it later, but the point is that at the end you will get a nice monthly pandas Dataframe that looks like this . #collapse dd=[] timesheet[&#39;Period Starting&#39;] = pd.to_datetime(timesheet[&#39;Period Starting&#39;]) weekdays = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;] for i, weekday in enumerate(weekdays): columns = [col for col in timesheet if col not in weekdays or col==weekday] tmp = timesheet[columns].copy() #dmytro todo: port backward tmp = tmp.rename(columns={weekday: &#39;effort&#39;}) tmp[&#39;date&#39;] = tmp[&#39;Period Starting&#39;]+pd.to_timedelta(&#39;{}D&#39;.format(i)) #dmytro todo: check period starting offset logic tmp[&#39;weekday&#39;] = weekday tmp = tmp.drop([&#39;Period Starting&#39;,&#39;Total (Days)&#39;],axis=1) dd +=[tmp] timeseries = pd.concat(dd,sort=False).sort_values([&#39;User&#39;,&#39;date&#39;]) timeseries = timeseries.reset_index().drop(&#39;index&#39;,axis=1) timeseries[&#39;date&#39;] = pd.to_datetime(timeseries[&#39;date&#39;]).astype(&#39;str&#39;) timeseries[&#39;month&#39;] = timeseries[&#39;date&#39;].str[:7] # dmytro todo: maybe improve date, month stylistics timeseries[&#39;weekend&#39;] = timeseries[&#39;weekday&#39;].apply(lambda x: x in [&#39;Sun&#39;,&#39;Sat&#39;]) timeseries[&#39;workweek&#39;] = timeseries[&#39;weekday&#39;].apply(lambda x: x not in [&#39;Sun&#39;,&#39;Sat&#39;]) timeseries.head(5) #timeseries[&#39;month&#39;] #dmytro todo: clean almost null rows . . Project Activity User Effort Type effort Billable date weekday month weekend workweek . 0 Upgrade in two contracts - 1 | Consultancy | CATTY THE NEW MANAGER | Actual | 0.000 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 1 Upgrade in two contracts - 2 | Consultancy | CATTY THE NEW MANAGER | Actual | 0.000 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 2 A pilot for huge opportunity | Consultancy | CATTY THE NEW MANAGER | Actual | 0.000 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 3 A pilot for huge opportunity | Consultancy | CATTY THE NEW MANAGER | Actual | 0.000 | False | 2020-02-16 | Sun | 2020-02 | True | False | . 4 Upgrade in two contracts - 1 | Consultancy | CATTY THE NEW MANAGER | Actual | 0.375 | True | 2020-02-17 | Mon | 2020-02 | False | True | . #timeseries_wide = timeseries.groupby(list(timeseries.columns.drop(&#39;effort&#39;))[:2])[&#39;effort&#39;].sum() #.unstack(&#39;date&#39;).reset_index().fillna(0) . #timeseries.groupby(&#39;User&#39;)[&#39;effort&#39;].sum()#.unstack(&#39;date&#39;).reset_index().fillna(0) . Profitability . Timesheets and projects budgets are now simple and you can manipulate them the way you want in few simple statements. If you studied excel formulas - you can do this also. Now, let&#39;s look at profitability in a simplest manner possible. Being a manager I suggest you do make your model as simple as possible to set benchmarks for you team. So, profit is Revenue – Cost and we intend to keep it simple. Having said that, you can implement the calculations you like. . Revenue: Let’s say that for a Time &amp; Material project you generate as much revenue as you bill (on agreed rate) up to its budget. For a Fixed Fee you split all the revenue per month as per % of effort you spend / are going to spend in the month (changes can be complicated, but they are easy to be managed in the way you want – just go through introduction and wait for the notebook we promised) . Let&#39;s assume that we are interested only by users in our headcount (so we filter out all EXT users) . # revenue calculation for a person for a month (SUM REV of all timesheet records * corresp project rates) revenue_df = timeseries[[&#39;User&#39;,&#39;Project&#39;,&#39;Billable&#39;,&#39;effort&#39;,&#39;date&#39;,&#39;month&#39;]].merge(projects[[&#39;Project&#39;,&#39;BASE RATE USD&#39;]],how=&#39;left&#39;,on=&#39;Project&#39;) revenue_df[&#39;BASE RATE USD&#39;] = revenue_df[&#39;BASE RATE USD&#39;].fillna(def_revenue) revenue_df = revenue_df.where(revenue_df[&#39;User&#39;].map(lambda x: x[:3]!=&#39;EXT&#39;)).dropna() revenue_df = revenue_df.where(revenue_df[&#39;Billable&#39;]).dropna() # TODO: implement FF revenue revenue_df[&#39;daily_revenue&#39;] = revenue_df[&#39;BASE RATE USD&#39;] * revenue_df[&#39;effort&#39;] revenue = revenue_df.groupby([&#39;User&#39;,&#39;month&#39;])[&#39;daily_revenue&#39;].sum().unstack().fillna(0) revenue = revenue[revenue.sum(1)&gt;0] revenue.head() #revenue_df.effort.sum() #revenue.shape #revenue.sum() #dmytro todo: check null effort, do smart groupby . month 2020-02 2020-03 2020-04 . User . CATTY THE NEW MANAGER 11550.000 | 19350.00 | 9412.500 | . FRANK THE CONSTULANT 15750.000 | 12425.00 | 14875.000 | . IVAN THE PROGRAMMER 25062.500 | 29043.75 | 25643.750 | . JACK THE EXPERT 29093.750 | 31331.25 | 24843.750 | . JACK THE MANAGER 24090.625 | 22318.75 | 18821.875 | . Cost: So, let’s start with the fact that just using the &quot;default cost rate&quot; is not enough - whenever margins are under pressure you should do better. You might have people working in different countries and of totally different levels. Talk to your finance team and get some estimates from them (or make it together). We’d say if you were appointed to run a team or business unit – they owe you that much. We will assume below that you managed to get few grades per Country (see roles). Costs per individual will go nicely also and the beauty of this model (compared to doing few excels by yourself that you can just add it - for all of your staff or some some, it will be 1 line of code). Let&#39;s calculate direct cost per momnth (here we check the cost of effort posted on timesheets, presuming they are full - can check per number of working days in a month also and compare). We are not interested by external resources, so we&#39;ll filter them out . # cost calculation for a project (SUM COST of all timesheet records * corresp cost rates - see roles) # dmytro todo: apply this to timeseries cost_df = timeseries[[&#39;User&#39;,&#39;Project&#39;,&#39;effort&#39;,&#39;date&#39;,&#39;month&#39;]].merge(headcount[[&#39;NAME&#39;,&#39;EU&#39;]],how=&#39;left&#39;,left_on=&#39;User&#39;,right_on=&#39;NAME&#39;) cost_df[&#39;EU&#39;] = cost_df[&#39;EU&#39;].fillna(def_cost) # todo: Dmytro - anything simpler to remove all starting with &quot;EXT&quot;? cost_df = cost_df.where(cost_df[&#39;User&#39;].map(lambda x: x[:3]!=&#39;EXT&#39;)).dropna() cost_df[&#39;daily_cost&#39;] = cost_df[&#39;EU&#39;] * cost_df[&#39;effort&#39;] cost = cost_df.groupby([&#39;User&#39;,&#39;month&#39;])[&#39;daily_cost&#39;].sum().unstack().fillna(0) cost = cost[cost.sum(1)&gt;0] cost.head() # cost_df.effort.sum() # cost.shape # cost.sum() #dmytro todo: check null effort, do smart groupby . month 2020-02 2020-03 2020-04 . User . CATTY THE NEW MANAGER 5362.50 | 11343.75 | 9332.8125 | . FRANK THE CONSTULANT 7700.00 | 8662.50 | 7768.7500 | . IVAN THE PROGRAMMER 11481.25 | 12925.00 | 11618.7500 | . JACK THE EXPERT 18750.00 | 20350.00 | 17100.0000 | . JACK THE MANAGER 11800.00 | 10900.00 | 9600.0000 | . Now, we can get to profit per user per month using operations on dataframe. And here it bears some fruit. Profit = revenue - cost. Indeed, it required some data cleanup . profit = revenue - cost profit.head() . month 2020-02 2020-03 2020-04 . User . CATTY THE NEW MANAGER 6187.500 | 8006.25 | 79.6875 | . FRANK THE CONSTULANT 8050.000 | 3762.50 | 7106.2500 | . IVAN THE PROGRAMMER 13581.250 | 16118.75 | 14025.0000 | . JACK THE EXPERT 10343.750 | 10981.25 | 7743.7500 | . JACK THE MANAGER 12290.625 | 11418.75 | 9221.8750 | . That&#39;s what we&#39;ve promised, right? Ok, second one - people who entered most Non-Billable hours in April . timeseries.where(~timeseries[&#39;Billable&#39;] &amp; (timeseries[&#39;month&#39;]==&#39;2020-04&#39;)).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . User CATTY THE NEW MANAGER 9.125000 EXT 6d5bda8573 6.933333 EXT 7bdf4bf350 5.000000 Name: effort, dtype: float64 . More compex stuff . Now let&#39;s actually show how to apply data science to data you&#39;ve seen above . First, some fun for those who want to learn python - you can make an interactive chart in few lines, e.g. here we want to make it visual in terms of if the value is above or below benchmark . #collapse # (Max) Interactive chart (bar chart effort per month, on click - effort in given month per person) # Remove the ugly hacking %matplotlib notebook u_input = &quot;CATTY THE NEW MANAGER&quot; drawdt = revenue.loc[u_input].T # setting colors list for bars depending on value def get_colors(v): colors = [] for i in range(len(drawdt.index)): color = &quot;yellow&quot; if (drawdt[i] &lt; v*0.9): color = &quot;red&quot; if (drawdt[i] &gt; v*1.1): color = &quot;green&quot; colors.append(color) return colors # replot. isdef = if it is called before any click def plt_all(isdef, yvalue): if isdef: bcolors = &quot;white&quot; xtitle = &#39;Set value&#39; else: a = np.empty(len(drawdt.index)) a.fill(yvalue) plt.plot(range(len(drawdt.index)), a, color=&quot;black&quot;,alpha=0.5) bcolors = get_colors(yvalue) xtitle = &#39;At ${:.0f}/m is&#39;.format(yvalue) plt.bar(range(len(drawdt.index)), drawdt.values, color=bcolors, width = 1, align=&#39;center&#39;, edgecolor=&#39;black&#39;) plt.xticks(range(len(drawdt.index)), drawdt.index) plt.ylabel(&quot;Revenue per month for &quot;+u_input) red_patch = mpatches.Patch(color=&#39;red&#39;, label=&#39;loss&#39;) yellow_patch = mpatches.Patch(color=&#39;yellow&#39;, label=&#39;in 10%&#39;) green_patch = mpatches.Patch(color=&#39;green&#39;, label=&#39;profit&#39;) plt.legend(handles=[red_patch,yellow_patch,green_patch],loc=&#39;upper left&#39;,title = xtitle,fontsize=7) plt.gca().set_title(&#39;Click on the plot to set benchmark&#39;) plt_all(True,0.0) def onclick(event): plt.cla() plt_all(False,event.ydata) _ = plt.gcf().canvas.mpl_connect(&#39;button_press_event&#39;, onclick) . . Ok, as a Team Leader you might not do that. Sorry. Let&#39;s get some calculations done. First, let&#39;s identify &quot;suspicios&quot; behaviors (e.g. a person who has more then 5 days in a row same effort on a given project and it is not 8 hours) - this is a quick check you do yourself, without asking PMO anything and making this official . # Simple anomalies detection # TODO: call for action, intro to next paper . Use cases . Few cases we identified when this data is helpfull . Decision making - e.g. identify top loss-making projects | Identify projects which require management attention | Identify top performers (profit-wise) | Identify non-billable hours and internal projects | Identify suspicious behaviours (we will write another post about it) Employee enters fixed hours per project per day over a period | Anomaly detection | . | Revenue and effort projections | Capacity calculations: load all data but plans and generate automated projection (effort person month / revenue * month) | Create consolidated analytic on demand for higher level of management (e.g. profitability forecast, revenue forecast, unallocated capacity) in case your ERP will not do anything like that Example: crisis cost saving - if you decrease hours for some contractors, how much cost do you save vs how much revenue to you lose | . | . But, that&#39;s not the point. The point is that loading your own data (excel, csv, tex - whatever) is simple and manipulating it is also simple - definetely simpler then doing it in numerous excel files and faster then waiting for PMOs. . Below code is to be moved inside and removed . Grouping data .",
            "url": "https://h17.github.io/fastreport/fastreport/",
            "relUrl": "/fastreport/",
            "date": " • May 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Data For Teams",
            "content": "Introduction . lets use this notebook as main, you can modified here as well and version control is in-built into colab natively . data = {} for csv_name in [&#39;projects&#39;,&#39;timesheet&#39;, &#39;roles&#39;]: url = &#39;https://raw.githubusercontent.com/h17/fastreport/master/data/{}.csv&#39;.format(csv_name) data[csv_name] = df = pd.read_csv(url, index_col=0) print(data[csv_name].head()) print(&#39;{csv_name}=data[&quot;{csv_name}&quot;]&#39;.format(csv_name=csv_name)) . Customer Short Name Nature Year PS Project Code 0 Fortune500 customer Consulting 2018.0 P001 1 Another customer Consulting 2020.0 P002 2 Good prospect Scoping 2020.0 P003 Project Name PM 0 Our big consultancy project Jack the Manager ERN011 1 Our medium consultancy project Kathy the Manager ERN008 2 A tiny estimation exercise Kathy the Manager ERN008 Contract Rate in Currency Curr. Contract Effort 0 1400.0 USD 1250.0 1 1200.0 GBP 350.0 2 1250.0 EUR 10.0 Revenue Recognition Start Date End Date Status 0 Time and Materials (T&amp;M) 2018-04-01 2020-12-01 OPEN 1 Time and Materials (T&amp;M) 2020-01-01 2020-10-01 OPEN 2 Time and Materials (T&amp;M) 2020-04-01 2020-06-01 OPEN projects=data[&#34;projects&#34;] Project Description Project Phase Work Description 2 Our big consultancy project Core Deployment Consultancy 3 Our big consultancy project Core Deployment Consultancy 4 Our big consultancy project Core Deployment Consultancy 5 Our big consultancy project Core Deployment Consultancy 6 Our big consultancy project Core Deployment Project Management Tax/Billing Activity Activity Type Billing Flag Resource Name 2 Consultancy NaN Billable John Doe ERN001 3 Consultancy NaN Billable John Doe ERN001 4 Consultancy NaN Billable John Doe ERN001 5 Consultancy NaN Billable John Doe ERN001 6 Project Management NaN Billable Jane Doe ERN002 Roles (Primary) Req Name Employee Type ... Total (Days) Sun Mon Tue 2 Unassigned NaN Employee ... 2.5 0.0 0.500 0.500 3 Unassigned NaN Employee ... 2.0 0.0 0.500 0.500 4 Unassigned NaN Employee ... 1.5 0.0 0.500 0.000 5 Unassigned NaN Employee ... 2.0 0.0 0.000 0.500 6 Unassigned NaN Employee ... 2.0 0.0 0.375 0.375 Wed Thu Fri Sat Timesheet Remarks total_cumsum 2 0.500 0.5 0.500 0.0 NaN 2.5 3 0.500 0.5 0.000 0.0 NaN 4.5 4 0.000 0.5 0.500 0.0 NaN 6.0 5 0.500 0.5 0.500 0.0 NaN 8.0 6 0.375 0.5 0.375 0.0 NaN 10.0 [5 rows x 23 columns] timesheet=data[&#34;timesheet&#34;] DEFAULT COSTS per ROLE and REGION (in $) EU EU-UK EU-CH 0 DIRECTOR 1100.0 1300.0 1100.0 1 Program Manager 900.0 1000.0 900.0 2 Project Manager 800.0 800.0 800.0 3 Project Coordinator 700.0 700.0 700.0 4 Solution Architect 900.0 1000.0 1050.0 roles=data[&#34;roles&#34;] . projects=data[&quot;projects&quot;] timesheet=data[&quot;timesheet&quot;] roles=data[&quot;roles&quot;] . Grouping data . setting columns to groupby . drop_group_columns = [&#39;Total (Days)&#39;, &#39;total_cumsum&#39;,&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;,&#39;Activity Type&#39;,&#39;Timesheet Remarks&#39;] groupby_columns = [i for i in timesheet.columns if i not in drop_group_columns] . one dimensional groupings . for i in groupby_columns: print(&#39; n&#39;) pd.DataFrame(timesheet.groupby([i])[&#39;Total (Days)&#39;].sum()).style . . Total (Days) . Project Description . A tiny estimation exercise 0.062500 | . Our big consultancy project 14.250000 | . Our medium consultancy project 66.718750 | . . Total (Days) . Project Phase . Configuration 12.531250 | . Core Deployment 14.250000 | . Delivering the Project 0.062500 | . Design 54.187500 | . . Total (Days) . Work Description . Consultancy 32.750000 | . Consultancy Funding 3.875000 | . Consultancy Netting 3.125000 | . EMails and Notifications 0.375000 | . Non Billable Support 2.250000 | . Project Management 10.375000 | . Scripting 26.375000 | . Training (non billable) 1.906250 | . . Total (Days) . Tax/Billing Activity . Consultancy 72.031250 | . Project Management 9.000000 | . . Total (Days) . Billing Flag . Billable 76.875000 | . Non-Billable 4.156250 | . . Total (Days) . Resource Name . Jack the Expert ERN006 0.875000 | . Jack the IT Guy ERN010 0.375000 | . Jane Doe ERN002 6.250000 | . Jane the Student ERN004 12.406250 | . Johm from Helpdesk 9.250000 | . John Doe ERN001 8.000000 | . John Smith ERN003 26.750000 | . John the Developer ERN005 12.500000 | . Kathy the Manager ERN008 4.125000 | . Mike the Tech ERN007 0.500000 | . . Total (Days) . Roles (Primary) . OB Consultant 49.656250 | . OB Developer 12.500000 | . OB Sr. Project Manager 4.125000 | . Unassigned 14.750000 | . . Total (Days) . Req Name . Consultant 62.156250 | . Project Manager 4.125000 | . . Total (Days) . Employee Type . Contingent Worker 4.125000 | . Employee 76.906250 | . . Total (Days) . Period Starting . 2020-03-01 19.312500 | . 2020-03-08 18.750000 | . 2020-03-15 18.750000 | . 2020-03-22 19.000000 | . 2020-03-29 5.218750 | . . Total (Days) . Effort Type . Actual 80.125000 | . Reported 0.906250 | . . Total (Days) . Timesheet Status . Approved/Not Progressed 0.718750 | . Entered 0.187500 | . Progressed 80.125000 | . two dimensional groupbys . for i in groupby_columns: print(i) if i != &#39;Resource Name&#39;: print(&#39; n&#39;) df = pd.DataFrame(timesheet.groupby([i,&#39;Resource Name&#39;])[&#39;Total (Days)&#39;].sum())#.style pd.pivot(df.reset_index(), i ,&#39;Resource Name&#39;,&#39;Total (Days)&#39;).fillna(0) . Project Description . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Project Description . A tiny estimation exercise 0.000 | 0.000 | 0.00 | 0.00000 | 0.00 | 0.0 | 0.00 | 0.0 | 0.0625 | 0.0 | . Our big consultancy project 0.000 | 0.000 | 6.25 | 0.00000 | 0.00 | 8.0 | 0.00 | 0.0 | 0.0000 | 0.0 | . Our medium consultancy project 0.875 | 0.375 | 0.00 | 12.40625 | 9.25 | 0.0 | 26.75 | 12.5 | 4.0625 | 0.5 | . Project Phase . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Project Phase . Configuration 0.000 | 0.000 | 0.00 | 1.90625 | 9.25 | 0.0 | 0.00 | 0.0 | 1.3750 | 0.0 | . Core Deployment 0.000 | 0.000 | 6.25 | 0.00000 | 0.00 | 8.0 | 0.00 | 0.0 | 0.0000 | 0.0 | . Delivering the Project 0.000 | 0.000 | 0.00 | 0.00000 | 0.00 | 0.0 | 0.00 | 0.0 | 0.0625 | 0.0 | . Design 0.875 | 0.375 | 0.00 | 10.50000 | 0.00 | 0.0 | 26.75 | 12.5 | 2.6875 | 0.5 | . Work Description . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Work Description . Consultancy 0.875 | 0.000 | 0.00 | 0.00000 | 0.000 | 8.0 | 16.375 | 7.0 | 0.000 | 0.5 | . Consultancy Funding 0.000 | 0.000 | 0.00 | 0.00000 | 3.875 | 0.0 | 0.000 | 0.0 | 0.000 | 0.0 | . Consultancy Netting 0.000 | 0.000 | 0.00 | 0.00000 | 3.125 | 0.0 | 0.000 | 0.0 | 0.000 | 0.0 | . EMails and Notifications 0.000 | 0.375 | 0.00 | 0.00000 | 0.000 | 0.0 | 0.000 | 0.0 | 0.000 | 0.0 | . Non Billable Support 0.000 | 0.000 | 0.00 | 0.00000 | 2.250 | 0.0 | 0.000 | 0.0 | 0.000 | 0.0 | . Project Management 0.000 | 0.000 | 6.25 | 0.00000 | 0.000 | 0.0 | 0.000 | 0.0 | 4.125 | 0.0 | . Scripting 0.000 | 0.000 | 0.00 | 10.50000 | 0.000 | 0.0 | 10.375 | 5.5 | 0.000 | 0.0 | . Training (non billable) 0.000 | 0.000 | 0.00 | 1.90625 | 0.000 | 0.0 | 0.000 | 0.0 | 0.000 | 0.0 | . Tax/Billing Activity . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Tax/Billing Activity . Consultancy 0.875 | 0.375 | 0.00 | 12.40625 | 9.25 | 8.0 | 26.75 | 12.5 | 1.375 | 0.5 | . Project Management 0.000 | 0.000 | 6.25 | 0.00000 | 0.00 | 0.0 | 0.00 | 0.0 | 2.750 | 0.0 | . Billing Flag . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Billing Flag . Billable 0.875 | 0.375 | 6.25 | 10.50000 | 7.00 | 8.0 | 26.75 | 12.5 | 4.125 | 0.5 | . Non-Billable 0.000 | 0.000 | 0.00 | 1.90625 | 2.25 | 0.0 | 0.00 | 0.0 | 0.000 | 0.0 | . Resource Name Roles (Primary) . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Roles (Primary) . OB Consultant 0.875 | 0.375 | 0.00 | 12.40625 | 9.25 | 0.0 | 26.75 | 0.0 | 0.000 | 0.0 | . OB Developer 0.000 | 0.000 | 0.00 | 0.00000 | 0.00 | 0.0 | 0.00 | 12.5 | 0.000 | 0.0 | . OB Sr. Project Manager 0.000 | 0.000 | 0.00 | 0.00000 | 0.00 | 0.0 | 0.00 | 0.0 | 4.125 | 0.0 | . Unassigned 0.000 | 0.000 | 6.25 | 0.00000 | 0.00 | 8.0 | 0.00 | 0.0 | 0.000 | 0.5 | . Req Name . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane the Student ERN004 Johm from Helpdesk John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 . Req Name . Consultant 0.875 | 0.375 | 12.40625 | 9.25 | 26.75 | 12.5 | 0.000 | . Project Manager 0.000 | 0.000 | 0.00000 | 0.00 | 0.00 | 0.0 | 4.125 | . Employee Type . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Employee Type . Contingent Worker 0.000 | 0.000 | 0.00 | 0.00000 | 0.00 | 0.0 | 0.00 | 0.0 | 4.125 | 0.0 | . Employee 0.875 | 0.375 | 6.25 | 12.40625 | 9.25 | 8.0 | 26.75 | 12.5 | 0.000 | 0.5 | . Period Starting . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Period Starting . 2020-03-01 0.125 | 0.375 | 0.000 | 2.87500 | 1.00 | 2.5 | 6.25 | 5.0 | 1.0000 | 0.1875 | . 2020-03-08 0.125 | 0.000 | 2.000 | 3.31250 | 0.75 | 2.0 | 6.25 | 3.0 | 1.3125 | 0.0000 | . 2020-03-15 0.125 | 0.000 | 1.875 | 3.31250 | 2.75 | 1.5 | 5.00 | 3.0 | 1.0625 | 0.1250 | . 2020-03-22 0.375 | 0.000 | 1.875 | 2.31250 | 3.75 | 2.0 | 6.25 | 1.5 | 0.7500 | 0.1875 | . 2020-03-29 0.125 | 0.000 | 0.500 | 0.59375 | 1.00 | 0.0 | 3.00 | 0.0 | 0.0000 | 0.0000 | . Effort Type . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Effort Type . Actual 0.750 | 0.375 | 6.25 | 11.81250 | 9.25 | 8.0 | 26.75 | 12.5 | 4.125 | 0.3125 | . Reported 0.125 | 0.000 | 0.00 | 0.59375 | 0.00 | 0.0 | 0.00 | 0.0 | 0.000 | 0.1875 | . Timesheet Status . Resource Name Jack the Expert ERN006 Jack the IT Guy ERN010 Jane Doe ERN002 Jane the Student ERN004 Johm from Helpdesk John Doe ERN001 John Smith ERN003 John the Developer ERN005 Kathy the Manager ERN008 Mike the Tech ERN007 . Timesheet Status . Approved/Not Progressed 0.125 | 0.000 | 0.00 | 0.59375 | 0.00 | 0.0 | 0.00 | 0.0 | 0.000 | 0.0000 | . Entered 0.000 | 0.000 | 0.00 | 0.00000 | 0.00 | 0.0 | 0.00 | 0.0 | 0.000 | 0.1875 | . Progressed 0.750 | 0.375 | 6.25 | 11.81250 | 9.25 | 8.0 | 26.75 | 12.5 | 4.125 | 0.3125 | . Creating timeseries . pd.to_dattmp[&#39;Period Starting&#39;] #+pd.to_timedelta(&#39;1D&#39;) . 2 2020-03-01 3 2020-03-08 4 2020-03-15 5 2020-03-22 6 2020-03-08 ... 58 2020-03-08 59 2020-03-15 60 2020-03-22 61 2020-03-29 62 2020-03-01 Name: Period Starting, Length: 61, dtype: object . dd=[] cc13 = list(timesheet.columns[:13]) cc12 = [c for c in cc13 if c not in [&#39;Period Starting&#39;,&#39;Activity Type&#39;]] timesheet[&#39;Period Starting&#39;] = pd.to_datetime(timesheet[&#39;Period Starting&#39;]) timesheet.sort_values(&#39;Period Starting&#39;) for i, weekday in enumerate([&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;]): tmp = timesheet[cc13+[weekday]].copy() tmp = tmp.rename(columns={weekday: &#39;progress&#39;}) tmp[&#39;date&#39;] = tmp[&#39;Period Starting&#39;]+pd.to_timedelta(&#39;{}D&#39;.format(i)) tmp[&#39;weekday&#39;] = weekday dd+=[tmp.drop(&#39;Period Starting&#39;,axis=1)] timeseries = pd.concat(dd).sort_values([&#39;Resource Name&#39;,&#39;date&#39;]) timeseries[&#39;date&#39;]=timeseries[&#39;date&#39;].astype(&#39;str&#39;) timeseries_workweek = timeseries[~timeseries[&#39;weekday&#39;].apply(lambda x: x in [&#39;Sun&#39;,&#39;Sat&#39;]) ].groupby(cc12+[&#39;date&#39;])[&#39;progress&#39;].sum().unstack(&#39;date&#39;).reset_index().fillna(0) timeseries = timeseries.groupby(cc12+[&#39;date&#39;])[&#39;progress&#39;].sum().unstack(&#39;date&#39;).reset_index().fillna(0) . Project Description Project Phase Work Description Tax/Billing Activity Activity Type Billing Flag Resource Name Roles (Primary) Req Name Employee Type Period Starting Effort Type Timesheet Status Total (Days) Sun Mon Tue Wed Thu Fri Sat Timesheet Remarks total_cumsum . 2 Our big consultancy project | Core Deployment | Consultancy | Consultancy | NaN | Billable | John Doe ERN001 | Unassigned | NaN | Employee | 2020-03-01 | Actual | Progressed | 2.5000 | 0.0 | 0.5000 | 0.5000 | 0.5 | 0.5000 | 0.500 | 0.0 | NaN | 2.5000 | . 57 Our medium consultancy project | Configuration | Training (non billable) | Consultancy | NaN | Non-Billable | Jane the Student ERN004 | OB Consultant | Consultant | Employee | 2020-03-01 | Actual | Progressed | 0.8750 | 0.0 | 0.1875 | 0.1875 | 0.0 | 0.2500 | 0.250 | 0.0 | NaN | 65.6875 | . 50 Our medium consultancy project | Configuration | Project Management | Consultancy | NaN | Billable | Kathy the Manager ERN008 | OB Sr. Project Manager | Project Manager | Contingent Worker | 2020-03-01 | Actual | Progressed | 0.4375 | 0.0 | 0.0000 | 0.0000 | 0.0 | 0.3125 | 0.125 | 0.0 | NaN | 61.6875 | . 49 Our medium consultancy project | Design | Project Management | Project Management | NaN | Billable | Kathy the Manager ERN008 | OB Sr. Project Manager | Project Manager | Contingent Worker | 2020-03-01 | Actual | Progressed | 0.5000 | 0.0 | 0.3750 | 0.1250 | 0.0 | 0.0000 | 0.000 | 0.0 | NaN | 61.2500 | . 46 Our medium consultancy project | Design | EMails and Notifications | Consultancy | NaN | Billable | Jack the IT Guy ERN010 | OB Consultant | Consultant | Employee | 2020-03-01 | Actual | Progressed | 0.3750 | 0.0 | 0.1250 | 0.2500 | 0.0 | 0.0000 | 0.000 | 0.0 | NaN | 58.5000 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 9 Our big consultancy project | Core Deployment | Project Management | Project Management | NaN | Billable | Jane Doe ERN002 | Unassigned | NaN | Employee | 2020-03-29 | Actual | Progressed | 0.5000 | 0.0 | 0.2500 | 0.2500 | NaN | NaN | NaN | NaN | NaN | 14.2500 | . 21 Our medium consultancy project | Design | Scripting | Consultancy | NaN | Billable | John Smith ERN003 | OB Consultant | Consultant | Employee | 2020-03-29 | Actual | Progressed | 1.5000 | 0.0 | 0.7500 | 0.7500 | NaN | NaN | NaN | NaN | NaN | 26.3750 | . 20 Our medium consultancy project | Design | Scripting | Consultancy | NaN | Billable | Jane the Student ERN004 | OB Consultant | Consultant | Employee | 2020-03-29 | Reported | Approved/Not Progressed | 0.5000 | 0.0 | 0.0000 | 0.5000 | NaN | NaN | NaN | NaN | NaN | 24.8750 | . 45 Our medium consultancy project | Configuration | Consultancy Netting | Consultancy | NaN | Billable | Johm from Helpdesk | OB Consultant | Consultant | Employee | 2020-03-29 | Actual | Progressed | 0.5000 | 0.0 | 0.5000 | 0.0000 | NaN | NaN | NaN | NaN | NaN | 58.1250 | . 37 Our medium consultancy project | Design | Consultancy | Consultancy | NaN | Billable | Jack the Expert ERN006 | OB Consultant | Consultant | Employee | 2020-03-29 | Reported | Approved/Not Progressed | 0.1250 | 0.0 | 0.0000 | 0.1250 | NaN | NaN | NaN | NaN | NaN | 51.1250 | . 61 rows × 23 columns . plots with all days of the week . #figure(figsize=(16,10)) for i in groupby_columns[:]: if i not in [&#39;Period Starting&#39;]: timeseries.groupby([i]).sum().T.cumsum().plot(figsize=(32,20),title=i,grid=True, marker=&#39;o&#39;, linestyle=&#39;--&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9932604358&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f993254cb70&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f993252eb00&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9932492fd0&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f99324d4e10&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f99323c3198&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9932339048&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f993230afd0&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f99322ea278&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f993223b940&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f99321ffcc0&gt; . plots with only work days of the week . #figure(figsize=(16,10)) for i in groupby_columns[:]: if i not in [&#39;Period Starting&#39;]: timeseries_workweek.groupby([i]).sum().T.cumsum().plot(figsize=(32,20),title=i,grid=True, marker=&#39;o&#39;, linestyle=&#39;--&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f993223b898&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9931b4cbe0&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9931aba128&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9931a2bcf8&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9931a6ae10&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f99319da2e8&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f99319407b8&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f99319130f0&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f993186c0b8&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9931841b00&gt; . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9931811080&gt; .",
            "url": "https://h17.github.io/fastreport/fastreport/",
            "relUrl": "/fastreport/",
            "date": " • May 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Quickplan",
            "content": "Stage 1: . Create a simple toolkit to load data on . Timesheets . | Cost rates . | Projects . | Employees . | . | Use some nice model to make “effort prediction” (I think loading timesheet data for couple years will give enough insights for a simple model). Nothing complex or fancy, but let’s have some “know how” . | Write a post/article and publish it (own website + some good places) . This is about coming clean and simple, not about the “new era for ERP” | . | . Stage 2: . Generalize a toolkit (world data, economics) . | Make a bigger toolkit . Dashboards . | Integration . | A place to make it a proper GPL library . | . | .",
            "url": "https://h17.github.io/fastreport/2020/04/01/QuickPlan.html",
            "relUrl": "/2020/04/01/QuickPlan.html",
            "date": " • Apr 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Data Science and Management by Dmytro Karabash: https://www.linkedin.com/in/dmytrokarabash/ . Management and Data Science by Maxim Korotkov: http://maximk.com . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://h17.github.io/fastreport/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://h17.github.io/fastreport/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}