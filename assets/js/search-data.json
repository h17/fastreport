{
  
    
        "post0": {
            "title": "Measuring organizational performance explained with The Game of Thrones",
            "content": "KPI, OKR, MBO, etc. Managers seem to like 3-letter abbreviations. Let&#39;s make them easy to remember. So, what is a Key Performance Indicator (KPI)? KPI&#39;s have been here for ages, and they are just about setting up quantifiable parameters and measuring those. It can be used as objectives for organization units or team members. What parameter can be measured when we look at the Battle of the Blackwater (from the side of King&#39;s Landing as Cersei seems more profound in management techniques)? If you don&#39;t know what I&#39;m talking about, I suggest you close the article right here - otherwise, read on. So let&#39;s look first at the parameter she is interested in - it is the percentage of Stannis Baratheon ships destroyed by the wildfire. It is an essential parameter for the protecting army in King&#39;s Landing. And it is nicely cascaded downwards. The group target is to destroy all ships with wildfire (while the outcome is slightly lower). . . Can this one be a Key Performance Indicator for your organization? Unless you run such battles on a recurrent basic (and they didn&#39;t do that even in Seven Kingdoms) - I would not refer to it as a KPI. You would like to use KPIs to monitor organization performance and improve it over periods, and this one is a one-off unique project. You can have Project KPIs, but I suggest sticking with the name Project Metrics. Advanced reader note - names do not matter. You can have project KPIs in your organization. What matters is that you don&#39;t confuse different management tools and use them only for what they are. Project Metrics are parameters set on a project level, measured throughout its execution, and reviewed at project retrospective or lessons learned. . Let&#39;s move to the North and set some KPIs for Night Watch. Quickly for those who&#39;ve forgotten: there are Seven Kingdoms, and The Wall built 8000 years ago. North or the Wall, there are bad things - wildling, giants, White Walkers maybe. The Night Watch aims to guard the Wall to keep the wildlings and White Walkers from crossing into the Seven Kingdoms. So, the KPIs: . . Is this a set of KPIs for The Night Watch organization? Yes. . Do organizations need KPIs? Yes, especially the bigger ones. The larger organization is, the more it will get focused on KPIs. How do you get your KPIs? You know your department aim: Consultancy unit aim is to generate Profit by delivering Professional Services, Night Watch aims to kill wildling and White Walkers. Then you set up a measurement system to capture this performance and cascade it—pure, straightforward, top-down. . Now, you are a Lord Commander sitting in Castle Black, and you need to cascade the KPIs we&#39;ve mentioned above. Are they perfect ones? Think of them for a second. How will you measure it and make it transparent? You are a new generation Lord Commander and are setting up bonuses for your Leadership Team. The Oath is &quot;I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post...&quot; but there is nothing about &quot;I shall take not performance-based yearly bonus&quot; (even the opposite - Benjen Stark, The First Ranger, said &quot;Here, a man gets what he earns, when he earns it.&quot;). Can you set up a yearly bonus based on the parameters above and reflecting your leaders&#39; performance? Let&#39;s focus on Rangers first (they fight, defend the Wall, and patrol the Haunted Forest). Well, if you just take numbers above, every leader gets the same KPI (because those are measured globally). Moreover, how do you know how many White Walkers are out there? Adjustment required. . You get some ale, think, and develop a KPI cascade. You end up with individual KPIs like: . . The second KPI is loosely aligned with the organizational objective, and that&#39;s what typically happens in organizations. Leadership KPIs are based on their team averages (60% of bonus) and organization KPIs (40% of bonus). So, years pass, and your team knows that their yearly bonus depends on those KPIs. You get different types of performers. Some truly follow your Vision Statement (&quot;I am the sword in the darkness. I am the watcher on the walls. I am the shield that guards the realms of men.&quot;), but most do not. For those, you observe two behaviors (or a combination of both). Some rangers will go to patrol, take some ale (should we prohibit it during working hours?), and camp a few miles outside. They get raid KPIs high, and Leadership closes its eyes on that - because their bonus goes up as well. Some will want to be heroes and go kill wildlings in crazy numbers, doing a lot of overtime (that&#39;s not what you&#39;ve wanted, but it helps to promote the company image and hire recruits). Some will raid into the North, kill villagers and present them as wildlings. If you find out, you classify it as not-compliance and apply sanctions (up to execution). . And such an organization works well as long as times are not too turbulent. How? Your individual KPIs are loosely aligned to the organization&#39;s objective, but they are somewhat aligned. There are a lot of camps around (you cap performance at 200% percent, so it makes sense to patrol a lot), so you are likely to spot a White Walker. Wildlings try to go deeper into the woods and thus are not trying to cross the Wall either. In a more volatile environment, when you need to innovate because of changing business settings, your organization appears less effective, though. . Peter Drucker, in his 1954 book The Practice of Management, proposed an approach called Management by Objectives (MBO). You&#39;re a Lord Commander, and you have not read that, but Maester referred you to something similar from a thousand years back. You don&#39;t want to rely solely on KPIs in appraisals (as too many members seem to do nearly nothing valuable and still get to 100%). You want to reward performance based on objectives that every sworn brother agrees to individually - so make this process more tailor-made. . You split your brotherhood into the Rangers, the Builders, and the Stewards with 3 Leaders (First Ranger, First Builder, and First Steward). You&#39;ve seen giants yourself, and they are enormous. So you talk to the First Builder and agree on specific objectives: . . Such objectives allow the Leadership team to cascade it further in a way that is tailored to their groups or team members, having their strengths and weaknesses. You no longer set up the same KPIs within a unity, but you align on every individual objective on a yearly meeting. Now you are even more competent Lord Commander - you Manage by Objectives. Brothers define objectives together with their leaders, and your organization grows. First Ranger also takes more tailor-made one: . . What&#39;s the issue now? Well, typically, your Objectives are defined between a team member and his boss and are not shared around (exceptions possible), and you set them in a way that reaching 100% is possible with reasonable effort. But the White Walkers have been spotted, and you have no clue how to kill those guys. . You are in an even more volatile environment, and what you need is Objectives and Key Results (OKR). The concept was introduced by Andrew Grove, former CEO of Intel, in the early 1980s. OKRs were popularized by Google using them from the beginning (you have no clue who Andrew Grove is, probably a wise Maester from the past). OKRs are similar to Objectives you used to set up following the MBO idea, with few key differences: . OKRs are transparent (everyone can see all OKRs) | OKRs are mostly set to be challenging (so reaching 100% or all of them if you have a list of specific ones is hard) - 70% is already good | OKRs are reviewed more ofter (quarterly) | OKRs specify not only &quot;what&quot; (Objective) but also &quot;how&quot; (Key Result) | OKRs are not linked to compensation (Bullshit statement - indeed your boss knows how you are doing, so they are not linked in a 1-to-1 manner, but indeed your compensation depends on how well you perform) We do not oppose OKRs to MBOs. You could do everything from above within MBO framework and never mention an OKR. | . Now we are talking. You Maester gets an OKR for this quarter, and your First Ranger also gets one. . . Those are not that easily reachable and will put quite some challenges. In most organizations, you get OKRs where a percentage of completion can be measured, but you can also get a list of more qualitative ones. So now, we can handle innovation better and get our organization challenged to grow from inside. Just don&#39;t forget your Vision Statement &quot;I am the fire that burns against the cold, the light that brings the dawn, the horn that wakes the sleepers, the shield that guards the realms of men.&quot; . Copyright &copy; Maxim Korotkov; 2020. This article is published under a Creative Commons Attribution 4.0 International License. .",
            "url": "https://yourdatablog.com/kpisandokrs/",
            "relUrl": "/kpisandokrs/",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Use Data Science to Handle Enterprise Resource Planning Data with Ease",
            "content": "Introduction . You’re a boss now. You have a team or a business unit doing consultancy. Probably a bunch of Consultants helping clients, some Project Managers leading your projects in a nice Agile or whatever way. Everyone fills their timesheets (and you cut their bonuses if they don’t) – the time is billed to clients, and you have Fixed Fee projects as well. Maybe smaller teams being parts of your organization also – you can lead ten, a hundred or a thousand people (hey, dude – you run a unit of 1000 employees? Don’t read this article – hire someone who did). You probably even have an ERP (Enterprise Resource Planning) or something and a CFO in a lovely corner office. Do you have an excellent way to estimate how much profit every team member and project brings and ways to predict it with reasonable precision? If you have a decent ERP dashboard which gives you all that – then you’re lucky, and you don’t need this article either. The chances are that you get a simple calculation end of the year – like “let’s take all revenue finance recognized on your projects in a year and man day cost at USD 800 to get your unit profitability”. USD 800 can seem crazily high or unacceptably low, depending on the business you’re in. So that’s the precision you have to count the money your team brings to the firm? Do we need to remind you that this is one of the reasons why your job exists? . What else can you get? All the timesheets projects with their budgets, and you can even get to approximate costs (let’s discuss it later) — a shitload of data for a year, even for a team of 10. What we show is that you don’t need an ERP to do the rest – the notebook in Jupyter will do. Keep this in mind - management starts with measurement. How can you supervise your team and projects if you don’t have their data at your fingers? . Why do you need Data Science here? Well, you can have all data at your fingers. Eventually, you would want to calculate your profit like . profit = revenue - cost . Not only as subtracting two numbers, but also on the level of tables - so the output of the above statement can be a table with profit per consultant per month, like this: . profit . 2020-02 2020-03 . CATHY THE NEW MANAGER 6187.50 | 8006.25 | . FRANK THE CONSTULANT 8050.00 | 3762.50 | . Or get a list of 3 people with most billable hours in March via the following statement . t.where(t[&#39;Billable&#39;] &amp; (t[&#39;month&#39;] == &#39;2020-03&#39;) ).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . The code above is indeed not executable, but we promise to get you there in a few paragraphs. And yes, there is some learning of python required. The huge difference from anything else you’ve been doing yourself (ERP reports, Excel, other tools) is that any analysis stays in the notebook and can be re-applied after your data changes. . Data Science . So, let’s get this done. First – yes, you need to know a bit of python to get the files in. The basic level will do. If you are a manager in 2020 and can’t write a simple script – hmm, you probably missed something. The objective is not to build an ERP and not even to have an easy-to-use toolkit - we want to show you how to make a toolkit for yourself (but feel free to reuse our code). What you will see is a straightforward set of examples - spend an hour or two to load your files into the notebook and then start playing with it - just make the analysis you want. You can end up checking a few numbers or building your charts and dashboards. It is ok, even if you work for a corporation (that’s where you need it most) - just install Anaconda and download the notebook. So, we first get and transform our input files (if you want to follow text AND all the code - read it on colab). . We are loading projects, timesheets, and roles below - more details will follow on what we presumed is inside. Note - files are loaded from the GitHub repository so that they will open in colab or your local machine just the same. . data = {} data_path = &#39;https://raw.githubusercontent.com/h17/fastreport/master/data/&#39; url = data_path + &#39;roles.csv&#39; data[&#39;roles&#39;] = pd.read_csv(url, index_col=0, sep=&quot;;&quot;) url = data_path + &#39;project_data.xlsm&#39; project_data = pd.ExcelFile(url) project_data.sheet_names . [&#39;TS Feb&#39;, &#39;TS Mar&#39;, &#39;TS Apr&#39;, &#39;Projects&#39;, &#39;Employees&#39;] . Don’t focus too much on the next code block - we have monthly timesheets in separate tabs and need to stack them one on top of another. Plus - we have errors in excel (Sat.1 column) - data cleanup is also required, quite usual for those who touched data science. Collapsed blocks in our notebook contain the code, which is not critical for understanding. If you’d rather read it all, we suggest you switch to either GitHub or colab, so you can also play with it. . # collapse timesheets = [] for sheet in project_data.sheet_names: if &#39;TS&#39; in sheet: timesheets += [pd.read_excel(project_data, sheet, header=2)] else: tmp = pd.read_excel(project_data, sheet) data[sheet] = tmp if &#39;Sat.1&#39; in timesheets[0]: # cleaning from Sat.1 timesheets[0] = timesheets[0].rename( columns={&#39;Sat&#39;: &#39;Sun&#39;, &#39;Sat.1&#39;: &#39;Sat&#39;}) data[&#39;timesheet&#39;] = pd.concat(timesheets, sort=False) d = {&#39;Billable&#39;: True, &#39;Non-Billable&#39;: False} data[&#39;timesheet&#39;][&#39;Billable&#39;] = data[&#39;timesheet&#39;][&#39;Billing&#39;].replace(d) data[&#39;timesheet&#39;].drop([&#39;Billing&#39;], axis=1, inplace=True) data[&#39;timesheet&#39;] = data[&#39;timesheet&#39;][~data[&#39;timesheet&#39;].User.isnull()] . . So, let&#39;s see what we&#39;ve got here: . data.keys() for key in data.keys(): string_format = &quot;{:20} shape: {:&gt;10} rows t and {:&gt;10} columns&quot; print(string_format.format(key, *data[key].shape)) . dict_keys([&#39;roles&#39;, &#39;Projects&#39;, &#39;Employees&#39;, &#39;timesheet&#39;]) . roles shape: 8 rows and 4 columns Projects shape: 48 rows and 10 columns Employees shape: 35 rows and 5 columns timesheet shape: 1792 rows and 14 columns . Data we loaded . Let us summarize it here – most probably if you are a team leader or business unit manager – you can get . Dictionaries Cost per region or default cost for “outside” contributors | Average revenue per hour for projects not “owned” by you | . | . # show roles roles = data[&quot;roles&quot;] roles . Seniority EU US UK . Position . Unit Head SENIOR | 1100 | 1300 | 1200 | . Program Manager EXPERIENCED | 900 | 1000 | 900 | . Project Manager SENIOR | 800 | 800 | 800 | . ... ... | ... | ... | ... | . Consultant SENIOR | 800 | 800 | 900 | . Consultant EXPERIENCED | 550 | 550 | 550 | . Consultant JUNIOR | 500 | 500 | 500 | . 8 rows × 4 columns . We need to set default values and bring it to format easy to use, which is very easy in python: . default_revenue = 1200 default_cost = 850 # wide to long format roles_long = pd.melt(roles.reset_index(), id_vars=[&#39;Position&#39;, &#39;Seniority&#39;], var_name=&#39;region&#39;, value_name=&#39;cost&#39;) roles_long . Position Seniority region cost . 0 Unit Head | SENIOR | EU | 1100 | . 1 Program Manager | EXPERIENCED | EU | 900 | . 2 Project Manager | SENIOR | EU | 800 | . ... ... | ... | ... | ... | . 21 Consultant | SENIOR | UK | 900 | . 22 Consultant | EXPERIENCED | UK | 550 | . 23 Consultant | JUNIOR | UK | 500 | . 24 rows × 4 columns . HeadCount List of your employees, with their grades (or costs) | Engagement model (employee or contractor) | . | . # show head count headcount = data[&quot;Employees&quot;] headcount = headcount.merge( roles_long[[&#39;Position&#39;, &#39;Seniority&#39;, &#39;region&#39;, &#39;cost&#39;]], how=&#39;left&#39;, left_on=[&#39;Seniority&#39;, &#39;Position&#39;, &#39;Country&#39;], right_on=[&#39;Seniority&#39;, &#39;Position&#39;, &#39;region&#39;]) headcount[&#39;cost&#39;] = headcount[&#39;cost&#39;].fillna(default_cost) headcount . Name Engagement Country Position Seniority region cost . 0 JANE DOE | STAFF | US | Consultant | EXPERIENCED | US | 550.00 | . 1 JOHN DOE | STAFF | FR | Consultant | JUNIOR | NaN | 850.00 | . 2 JOHN SMITH | STAFF | US | Consultant | EXPERIENCED | US | 550.00 | . ... ... | ... | ... | ... | ... | ... | ... | . 32 JOHN THE CONSULTANT | STAFF | FR | Consultant | EXPERIENCED | NaN | 850.00 | . 33 JANE THE MANAGER | CONTRACTOR | BE | Project Manager | SENIOR | NaN | 850.00 | . 34 JACK THE EXPERT | STAFF | BE | Consultant | SENIOR | NaN | 850.00 | . 35 rows × 7 columns . Projects with budgets, effort estimates, dates, types of revenue recognition (Time and Material, Fixed Fee or something else), et cetera | . # show projects projects = data[&quot;Projects&quot;] projects . Client ID Project ID Project PM Region Start End Funding Daily Rate TCV . 0 13154 | 68454 | Medium consutancy 1 | SUSAN THE MANAGER | Europe | 2019-01-16 08:00:00 | 2020-07-22 14:00:00 | Time and Materials | 1200 | 39,000 USD | . 1 2764 | 70285 | Our biggest project | EXT 6a8e0ca747 | Europe | 2019-10-01 08:00:00 | 2021-04-30 11:00:00 | Time and Materials | 1200 | 1,450,000 USD | . 2 12916 | 68093 | Upgrade to new version | TIM THE LEAVER | Europe | 2018-09-28 08:00:00 | 2020-04-27 17:00:00 | Fixed Fee | 1200 | 127,500 USD | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 45 12899 | 63852 | Huge consultancy pool | JACK THE MANAGER | Europe | 2017-08-01 08:00:00 | 2020-04-27 17:00:00 | Time and Materials | 1200 | 198,000 USD | . 46 12901 | 71248 | Small upgrade | JACK THE MANAGER | Europe | 2020-01-29 08:00:00 | 2020-12-31 17:00:00 | Time and Materials | 1200 | 108,000 USD | . 47 17719 | 70618 | Small consultancy pool | SUSAN THE MANAGER | Europe | 2019-11-06 08:00:00 | 2020-06-30 17:00:00 | Time and Materials | 1200 | 27,200 USD | . 48 rows × 10 columns . Timesheets for your team / your projects. It is possible that other teams can contribute to your projects and your team might work in outside projects Typically arrive monthly or weekly | (optional) Planned effort There might be none, in one of the next posts we&#39;ll talk about autofill | . | . | . # show timesheets timesheet = data[&quot;timesheet&quot;] timesheet . Project Activity User Period Starting Effort Type Total (Days) Sun Mon Tue Wed Thu Fri Sat Billable . 0 PRJ f74fe3647d | Consultancy | EXT 800982ab08 | 2020-02-02 | Actual | 2.50 | 0.00 | 0.50 | 0.50 | 0.50 | 0.50 | 0.50 | 0.00 | True | . 1 PRJ f74fe3647d | Consultancy | EXT c8c92ca432 | 2020-02-02 | Actual | 2.50 | 0.00 | 0.50 | 0.50 | 0.50 | 0.50 | 0.50 | 0.00 | True | . 2 PRJ f74fe3647d | Consultancy | EXT c8c92ca432 | 2020-02-09 | Actual | 2.50 | 0.00 | 0.50 | 0.50 | 0.50 | 0.50 | 0.50 | 0.00 | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 620 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-12 | Actual | 1.00 | 0.00 | 0.50 | 0.00 | 0.50 | 0.00 | 0.00 | 0.00 | True | . 621 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-19 | Actual | 1.00 | 0.00 | 0.50 | 0.00 | 0.00 | 0.50 | 0.00 | 0.00 | True | . 622 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-26 | Reported | 1.50 | 0.00 | 0.50 | 0.50 | 0.00 | 0.50 | nan | nan | True | . 1792 rows × 14 columns . EXT users here are outside of our headcount (let’s say we are not getting the real names, but rather some ids from ERP in such case) . Why not just have things done by ERP? Your ERP probably does not present you anything nicely in terms of parameters you’d want to control on your level (otherwise, you won’t read this anyway). There may be a project running to improve it by 2025 - maybe one of the Big4 firms is interviewing you for requirements. If you are steering this boat long enough – you might have ended up with quick and dirty calculation, SQL queries to SAP (with field names still in German), or an Excel file. Why? Your bosses don’t care – they already hired you, and a better ERP is coming in 2025 anyway. So they want to know how much money your team makes (preferably - per person, per month, per project, with charts, projections, and comparisons) and to know why it is not so profitable (because it never is). . To simplify your way forward we are going to create a timeseries out of timesheets which is a bit more involved so you can skip it for now and come back to it later, but the point is that at the end you will get a lovely monthly pandas DataFrame that looks like this . # collapse dd = [] timesheet[&#39;Period Starting&#39;] = pd.to_datetime(timesheet[&#39;Period Starting&#39;]) weekdays = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;] for i, weekday in enumerate(weekdays): columns = [col for col in timesheet if col not in weekdays or col == weekday] tmp = timesheet[columns].copy() tmp = tmp.rename(columns={weekday: &#39;effort&#39;}) tmp[&#39;date&#39;] = tmp[&#39;Period Starting&#39;]+pd.to_timedelta(&#39;{}D&#39;.format(i)) tmp[&#39;weekday&#39;] = weekday tmp = tmp.drop([&#39;Period Starting&#39;, &#39;Total (Days)&#39;], axis=1) dd += [tmp] timeseries = pd.concat(dd, sort=False).sort_values([&#39;User&#39;, &#39;date&#39;]) timeseries = timeseries.reset_index().drop(&#39;index&#39;, axis=1) timeseries[&#39;date&#39;] = pd.to_datetime(timeseries[&#39;date&#39;]).astype(&#39;str&#39;) timeseries[&#39;month&#39;] = timeseries[&#39;date&#39;].str[:7] def isweekend(x): return x in [&#39;Sun&#39;, &#39;Sat&#39;] timeseries[&#39;weekend&#39;] = timeseries[&#39;weekday&#39;].apply(isweekend) timeseries[&#39;workweek&#39;] = ~timeseries[&#39;weekday&#39;].apply(isweekend) timeseries . . Project Activity User Effort Type effort Billable date weekday month weekend workweek . 0 Upgrade in two contracts - 1 | Consultancy | CATHY THE NEW MANAGER | Actual | 0.00 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 1 Upgrade in two contracts - 2 | Consultancy | CATHY THE NEW MANAGER | Actual | 0.00 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 2 A pilot for huge opportunity | Consultancy | CATHY THE NEW MANAGER | Actual | 0.00 | True | 2020-02-16 | Sun | 2020-02 | True | False | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 12541 Strategic project in a new region | Project Management | TOM THE TEAM LEADER | Reported | nan | True | 2020-05-01 | Fri | 2020-05 | False | True | . 12542 Strategic project in a new region 2 | Consultancy | TOM THE TEAM LEADER | Actual | nan | False | 2020-05-02 | Sat | 2020-05 | True | False | . 12543 Strategic project in a new region | Project Management | TOM THE TEAM LEADER | Reported | nan | True | 2020-05-02 | Sat | 2020-05 | True | False | . 12544 rows × 11 columns . It is common in data science to have one big DataFrame (similar to excel tab or SQL table) that you can group and filter easily. It is helpful because it makes things very easy. . Profitability . Timesheets and project budgets are simplified this way, and you can manipulate them the way you want in a few simple statements. If you studied excel formulas - you could do this also. Now, let’s look at profitability in the most straightforward manner possible. As a manager, we suggest you do that to set benchmarks for your team. So, profit is $$ mbox{Revenue  –  Cost}$$ and we intend to keep it simple. You can implement the calculations you like. . Revenue: Let’s say that for a Time &amp; Material project, you generate as much revenue as you bill (on agreed rate) up to its budget. We are not doing any Fixed Fee recognition formula. Different companies do it differently, and you’ll either need historical data or actual recognized value depending on how you operate. . We also assume that we are interested only by users in our headcount (so we filter out all EXT users). . # revenue calculation for a person for a month # (SUM REV of all timesheet records * corresp project rates) revenue_df = timeseries[[&#39;User&#39;, &#39;Project&#39;, &#39;Billable&#39;, &#39;effort&#39;, &#39;date&#39;, &#39;month&#39;]] revenue_df = revenue_df.merge(projects[[&#39;Project&#39;, &#39;Daily Rate&#39;]], how=&#39;left&#39;, on=&#39;Project&#39;) revenue_df[&#39;Daily Rate&#39;].fillna(default_revenue, inplace=True) revenue_df = revenue_df[(revenue_df[&#39;User&#39;].str[:3] != &#39;EXT&#39;) &amp; (revenue_df[&#39;Billable&#39;])] revenue_df[&#39;daily_revenue&#39;] = revenue_df[&#39;Daily Rate&#39;] * revenue_df[&#39;effort&#39;] revenue = revenue_df.groupby([&#39;User&#39;, &#39;month&#39;])[ &#39;daily_revenue&#39;].sum().unstack().fillna(0) revenue = revenue[revenue.sum(1) &gt; 0] revenue.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 11550.00 | 19350.00 | 9412.50 | 0.00 | . FRANK THE CONSTULANT 15750.00 | 12425.00 | 14875.00 | 0.00 | . IVAN THE PROGRAMMER 25062.50 | 29043.75 | 25643.75 | 0.00 | . JACK THE EXPERT 29093.75 | 31331.25 | 24843.75 | 0.00 | . JACK THE MANAGER 24090.62 | 22318.75 | 18821.88 | 0.00 | . We got revenue per month per person. Not too sophisticated, right? . Cost: Let’s start with the fact that just using the “default cost rate” is not enough - whenever margins are under pressure, you should do better. You might have people working in different countries and of totally different levels. Talk to your finance team and get some estimates from them (or make it together). We’d say they owe you that much if you were appointed to run a team or business unit. We will assume below that you managed to get a few grades per Country (see roles). Costs per individual will be nice to have as well. The beauty of this tool (compared to doing Excel by yourself) is that you can just add it - it will be a few lines of code. Let’s calculate direct cost per month: here we check the cost of effort posted on timesheets, presuming they are full - can check per number of working days in a month also and compare. We are not interested in external resources, so we’ll filter them out again. . # cost calculation for a project # (SUM COST of all timesheet records * corresp cost rates - see roles) cost_df = timeseries[[&#39;User&#39;, &#39;Project&#39;, &#39;effort&#39;, &#39;date&#39;, &#39;month&#39;]] cost_df = cost_df.merge(headcount[[&#39;Name&#39;, &#39;cost&#39;]], how=&#39;left&#39;, left_on=&#39;User&#39;, right_on=&#39;Name&#39;) cost_df = cost_df[cost_df[&#39;User&#39;].str[:3] != &#39;EXT&#39;] cost_df[&#39;daily_cost&#39;] = cost_df[&#39;cost&#39;] * cost_df[&#39;effort&#39;] cost = cost_df.groupby([&#39;User&#39;, &#39;month&#39;])[&#39;daily_cost&#39;].sum() cost = cost.unstack().fillna(0) cost = cost[cost.sum(1) &gt; 0] cost.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 5362.50 | 11343.75 | 9332.81 | 0.00 | . FRANK THE CONSTULANT 7700.00 | 8662.50 | 7768.75 | 0.00 | . IVAN THE PROGRAMMER 11481.25 | 12925.00 | 11618.75 | 0.00 | . JACK THE EXPERT 19921.88 | 21621.88 | 18168.75 | 0.00 | . JACK THE MANAGER 11800.00 | 10900.00 | 9600.00 | 0.00 | . Now, we can get to profit per user per month using operations on dataframes. And here it bears some fruit. Profit = revenue - cost. Indeed, it required some data cleanup first - but not too much . profit = revenue - cost profit.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 6187.50 | 8006.25 | 79.69 | 0.00 | . FRANK THE CONSTULANT 8050.00 | 3762.50 | 7106.25 | 0.00 | . IVAN THE PROGRAMMER 13581.25 | 16118.75 | 14025.00 | 0.00 | . JACK THE EXPERT 9171.88 | 9709.38 | 6675.00 | 0.00 | . JACK THE MANAGER 12290.62 | 11418.75 | 9221.88 | 0.00 | . That&#39;s what we&#39;ve promised, right? Ok, second one - people who entered most Billable hours in March . t = timeseries # concatenating just in case you are reading from phone t.where(t[&#39;Billable&#39;] &amp; (t[&#39;month&#39;] == &#39;2020-03&#39;) ).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . User TOM THE EXPERT 26.75 JACK THE EXPERT 25.31 PHILIP THE EXPERT 24.88 Name: effort, dtype: float64 . What else? . Now let’s look at how to apply some python and data science techniques (we will get to more details in our next posts) to data you’ve seen above and how to visualize it nicely. . First, let’s take a PM and visualize revenue on his/her projects per month. . %matplotlib inline pm_selected = &quot;CATHY THE NEW MANAGER&quot; drawdt = revenue.loc[pm_selected].T plt.bar(range(len(drawdt.index)), drawdt.values, color=&quot;green&quot;, width=1, align=&#39;center&#39;, edgecolor=&#39;black&#39;); plt.xticks(range(len(drawdt.index)), drawdt.index); plt.ylabel(&quot;Revenue / month: &quot;+pm_selected); . That was simple. Then, some fun for those who know slightly more advanced python - you can make an interactive chart in few lines, e.g., here we want to make it visual in terms of if the value is above or below the benchmark (works if you copy notebook, is not clickable on the blog) . # collapse %matplotlib notebook # colors of bars def get_colors(v): colors = [] for i in range(len(drawdt.index)): color = &quot;yellow&quot; if (drawdt[i] &lt; v*0.9): color = &quot;red&quot; if (drawdt[i] &gt; v*1.1): color = &quot;green&quot; colors.append(color) return colors # plot drawing def plt_all(isdef, yvalue): if isdef: bcolors = &quot;white&quot; xtitle = &#39;Set value&#39; else: a = np.empty(len(drawdt.index)) a.fill(yvalue) plt.plot(range(len(drawdt.index)), a, color=&quot;black&quot;, alpha=0.5) bcolors = get_colors(yvalue) xtitle = &#39;At ${:.0f}/m is&#39;.format(yvalue) plt.bar(range(len(drawdt.index)), drawdt.values, color=bcolors, width=1, align=&#39;center&#39;, edgecolor=&#39;black&#39;) plt.xticks(range(len(drawdt.index)), drawdt.index) plt.ylabel(&quot;Revenue / month: &quot;+pm_selected) red_patch = mpatches.Patch(color=&#39;red&#39;, label=&#39;loss&#39;) yellow_patch = mpatches.Patch(color=&#39;yellow&#39;, label=&#39;in 10%&#39;) green_patch = mpatches.Patch(color=&#39;green&#39;, label=&#39;profit&#39;) plt.legend(handles=[red_patch, yellow_patch, green_patch], loc=&#39;upper left&#39;, title=xtitle, fontsize=7) plt.gca().set_title(&#39;Click on the plot to set benchmark&#39;) plt_all(True, 0.0) def onclick(event): plt.cla() plt_all(False, event.ydata) plt.gcf().canvas.mpl_connect(&#39;button_press_event&#39;, onclick); . . Ok, as a Team Leader, you might not do that. Sorry. Let’s get some calculations done. First, let’s identify “suspicious” time entered (e.g., a person who has more than three days in a row same effort on a given project and it is not 8 hours) - this is a quick check you do yourself, without asking PMO anything and making this official. I can call this suspicious because nature of our work (and yours might be different - so you look for another pattern) makes it highly unlikely that you do spend the same amount of time on one project a few days in a row (unless you are assigned full time). What you are doing is likely just splitting your working time between your projects in some manner. . # remove the weekend working = timeseries[(timeseries[&#39;workweek&#39;] == True) &amp; (timeseries.Billable)].copy() working = working.groupby([&quot;User&quot;, &quot;Project&quot;, &quot;date&quot;]).sum().sort_index() working[&#39;value_grp&#39;] = (working.effort.diff(1) == 0).astype(&#39;int&#39;) def streak(df): # function that finds streak of 1s: 0,1,1,0,1 -&gt; 0,1,2,0,1 df0 = df != 0 return df0.cumsum()-df0.cumsum().where(~df0).ffill().fillna(0).astype(int) working[&#39;streak&#39;] = streak( working[&#39;value_grp&#39;]) # streak of identical effort result = working[(0 &lt; working.effort) &amp; (working.effort &lt; 1) &amp; (working[&#39;streak&#39;] &gt; 3)].reset_index() result = result[result.User.str[:3] != &#39;EXT&#39;].groupby([&#39;User&#39;, &#39;Project&#39;]).last() result[[&quot;effort&quot;,&quot;date&quot;,&quot;streak&quot;]] . effort date streak . User Project . CATHY THE NEW MANAGER Upgrade in two contracts - 1 0.06 | 2020-03-12 | 6 | . FRANK THE CONSTULANT Upgrade in two contracts - 1 0.12 | 2020-03-05 | 4 | . Upgrade in two contracts - 2 0.12 | 2020-03-05 | 4 | . JACK THE EXPERT Some upgrade project 0.12 | 2020-03-13 | 4 | . JOHN THE CONSULTANT PRJ f8b96bd2c4 0.25 | 2020-04-28 | 6 | . TIM THE LEAVER Big upgrade and rework 0.12 | 2020-03-09 | 4 | . Upgrade to new version 0.12 | 2020-03-10 | 4 | . To be clear, we do not recommend sending emails with the subject “The list of those whose timings are suspicious” based on the above. People will likely change their behaviors, and you might not easily find the next pattern. As a manager, you dig into your data, find insights, and act on them the way you see fit. You do not just tell your teenage kid that now you know where he hides cigarettes, do you? . Use cases . Here are some cases where the above can be helpful - we will look at some of them in our next posts. . Decision-making - e.g. identify top loss-making projects | Identify projects which require management attention - also apply Machine Learning here and identify the projects you&#39;ll pick up yourself | Better analysis of non-billable hours | Identify suspicious behaviors - anomaly detections | Revenue and effort projections based on existing patterns and not highlighting when the plan deviates | Consolidated analytic on demand (e.g. profitability forecast, revenue forecast, unallocated capacity) in case your ERP will not do anything like that | . The point is that loading your data (excel, CSV, TSV - whatever) is simple, and manipulating it is simple - more straightforward than doing it in many excel files and faster than waiting for PMOs. . Stay tuned for our next post. . Copyright &copy; Dmytro Karabash, Maxim Korotkov; 2020. This notebook is licensed under a Creative Commons Attribution 4.0 International License. .",
            "url": "https://yourdatablog.com/teamdata/",
            "relUrl": "/teamdata/",
            "date": " • Jun 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Jupyter Notebook to Handle Enterprise Resource Planning Data with Ease",
            "content": "Introduction . You’re a boss now. You have a team or a business unit doing consultancy. Probably a bunch of Consultants helping clients, some Project Managers leading your projects in a nice Agile or whatever way. Everyone fills their timesheets (and you cut their bonuses if they don’t) – the time is billed to clients, and you have Fixed Fee projects as well. Maybe smaller teams being parts of your organization also – you can lead ten, a hundred or a thousand people (hey, dude – you run a unit of 1000 employees? Don’t read this article – hire someone who did). You probably even have an ERP (Enterprise Resource Planning) or something and a CFO in a lovely corner office. Do you have an excellent way to estimate how much profit every team member and project brings and ways to predict it with reasonable precision? If you have a decent ERP dashboard which gives you all that – then you’re lucky, and you don’t need this article either. The chances are that you get a simple calculation end of the year – like “let’s take all revenue finance recognized on your projects in a year and man day cost at USD 800 to get your unit profitability”. USD 800 can seem crazily high or unacceptably low, depending on the business you’re in. So that’s the precision you have to count the money your team brings to the firm? Do we need to remind you that this is one of the reasons why your job exists? What else can you get? All the timesheets projects with their budgets, and you can even get to approximate costs (let’s discuss it later) — a shitload of data for a year, even for a team of 10. What we show is that you don’t need an ERP to do the rest – the notebook in Jupyter will do. Keep this in mind - management starts with measurement. How can you supervise your team and projects if you don’t have their data at your fingers? Why do you need Data Science here? Well, you can have all data at your fingers. Eventually, you would want to calculate your profit like python profit = revenue - cost Not only as subtracting two numbers, but also on the level of tables - so the output of the above statement can be a table with profit per consultant per month, like this: . profit . 2020-02 2020-03 . CATHY THE NEW MANAGER 6187.50 | 8006.25 | . FRANK THE CONSTULANT 8050.00 | 3762.50 | . Or get list of 3 people with most billable hours in March via following statement . t.where(t[&#39;Billable&#39;] &amp; (t[&#39;month&#39;] == &#39;2020-03&#39;) ).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . The code above is indeed not executable, but we promise to get you there in a few paragraphs. And yes, there is some learning of python required. The huge difference from anything else you’ve been doing yourself (ERP reports, Excel, other tools) is that any analysis stays in the notebook and can be re-applied after your data changes. . Data Science . So, let’s get this done. First – yes, you need to know a bit of python to get the files in. The basic level will do. If you are a manager in 2020 and can’t write a simple script – hmm, you probably missed something. The objective is not to build an ERP and not even to have an easy-to-use toolkit - we want to show you how to make a toolkit for yourself (but feel free to reuse our code). What you will see is a straightforward set of examples - spend an hour or two to load your files into the notebook and then start playing with it - just make the analysis you want. You can end up checking a few numbers or building your charts and dashboards. It is ok, even if you work for a corporation (that’s where you need it most) - just install Anaconda and download the notebook. So, we first get and transform our input files (if you want to follow text AND all the code - read it on colab). . We are loading projects, timesheets, and roles below - more details will follow on what we presumed is inside. Note - files are loaded from the GitHub repository so that they will open in colab or your local machine just the same. . data = {} data_path = &#39;https://raw.githubusercontent.com/h17/fastreport/master/data/&#39; url = data_path + &#39;roles.csv&#39; data[&#39;roles&#39;] = pd.read_csv(url, index_col=0, sep=&quot;;&quot;) url = data_path + &#39;project_data.xlsm&#39; project_data = pd.ExcelFile(url) project_data.sheet_names . [&#39;TS Feb&#39;, &#39;TS Mar&#39;, &#39;TS Apr&#39;, &#39;Projects&#39;, &#39;Employees&#39;] . Don’t focus too much on the next code block - we have monthly timesheets in separate tabs and need to stack them one on top of another. Plus - we have errors in excel (Sat.1 column) - data cleanup is also required, quite usual for those who touched data science. Collapsed blocks in our notebook contain the code, which is not critical for understanding. If you’d rather read it all, we suggest you switch to either GitHub or colab, so you can also play with it. . # collapse timesheets = [] for sheet in project_data.sheet_names: if &#39;TS&#39; in sheet: timesheets += [pd.read_excel(project_data, sheet, header=2)] else: tmp = pd.read_excel(project_data, sheet) data[sheet] = tmp if &#39;Sat.1&#39; in timesheets[0]: # cleaning from Sat.1 timesheets[0] = timesheets[0].rename( columns={&#39;Sat&#39;: &#39;Sun&#39;, &#39;Sat.1&#39;: &#39;Sat&#39;}) data[&#39;timesheet&#39;] = pd.concat(timesheets, sort=False) d = {&#39;Billable&#39;: True, &#39;Non-Billable&#39;: False} data[&#39;timesheet&#39;][&#39;Billable&#39;] = data[&#39;timesheet&#39;][&#39;Billing&#39;].replace(d) data[&#39;timesheet&#39;].drop([&#39;Billing&#39;], axis=1, inplace=True) data[&#39;timesheet&#39;] = data[&#39;timesheet&#39;][~data[&#39;timesheet&#39;].User.isnull()] . . So, let&#39;s see what we&#39;ve got here: . data.keys() for key in data.keys(): string_format = &quot;{:20} shape: {:&gt;10} rows t and {:&gt;10} columns&quot; print(string_format.format(key, *data[key].shape)) . dict_keys([&#39;roles&#39;, &#39;Projects&#39;, &#39;Employees&#39;, &#39;timesheet&#39;]) . roles shape: 8 rows and 4 columns Projects shape: 48 rows and 10 columns Employees shape: 35 rows and 5 columns timesheet shape: 1792 rows and 14 columns . Data we loaded . Let us summarize it here – most probably if you are a team leader or business unit manager – you can get . Dictionaries Cost per region or default cost for “outside” contributors | Average revenue per hour for projects not “owned” by you | . | . # show roles roles = data[&quot;roles&quot;] roles . Seniority EU US UK . Position . Unit Head SENIOR | 1100 | 1300 | 1200 | . Program Manager EXPERIENCED | 900 | 1000 | 900 | . Project Manager SENIOR | 800 | 800 | 800 | . ... ... | ... | ... | ... | . Consultant SENIOR | 800 | 800 | 900 | . Consultant EXPERIENCED | 550 | 550 | 550 | . Consultant JUNIOR | 500 | 500 | 500 | . 8 rows × 4 columns . We need to set default values and bring it to format easy to use, which is very easy in python: . default_revenue = 1200 default_cost = 850 # wide to long format roles_long = pd.melt(roles.reset_index(), id_vars=[&#39;Position&#39;, &#39;Seniority&#39;], var_name=&#39;region&#39;, value_name=&#39;cost&#39;) roles_long . Position Seniority region cost . 0 Unit Head | SENIOR | EU | 1100 | . 1 Program Manager | EXPERIENCED | EU | 900 | . 2 Project Manager | SENIOR | EU | 800 | . ... ... | ... | ... | ... | . 21 Consultant | SENIOR | UK | 900 | . 22 Consultant | EXPERIENCED | UK | 550 | . 23 Consultant | JUNIOR | UK | 500 | . 24 rows × 4 columns . HeadCount List of your employees, with their grades (or costs) | Engagement model (employee or contractor) | . | . # show head count headcount = data[&quot;Employees&quot;] headcount = headcount.merge( roles_long[[&#39;Position&#39;, &#39;Seniority&#39;, &#39;region&#39;, &#39;cost&#39;]], how=&#39;left&#39;, left_on=[&#39;Seniority&#39;, &#39;Position&#39;, &#39;Country&#39;], right_on=[&#39;Seniority&#39;, &#39;Position&#39;, &#39;region&#39;]) headcount[&#39;cost&#39;] = headcount[&#39;cost&#39;].fillna(default_cost) headcount . Name Engagement Country Position Seniority region cost . 0 JANE DOE | STAFF | US | Consultant | EXPERIENCED | US | 550.0 | . 1 JOHN DOE | STAFF | FR | Consultant | JUNIOR | NaN | 850.0 | . 2 JOHN SMITH | STAFF | US | Consultant | EXPERIENCED | US | 550.0 | . ... ... | ... | ... | ... | ... | ... | ... | . 32 JOHN THE CONSULTANT | STAFF | FR | Consultant | EXPERIENCED | NaN | 850.0 | . 33 JANE THE MANAGER | CONTRACTOR | BE | Project Manager | SENIOR | NaN | 850.0 | . 34 JACK THE EXPERT | STAFF | BE | Consultant | SENIOR | NaN | 850.0 | . 35 rows × 7 columns . Projects with budgets, effort estimates, dates, types of revenue recognition (Time and Material, Fixed Fee or something else), et cetera | . # show projects projects = data[&quot;Projects&quot;] projects . Client ID Project ID Project PM Region Start End Funding Daily Rate TCV . 0 13154 | 68454 | Medium consutancy 1 | SUSAN THE MANAGER | Europe | 2019-01-16 08:00:00 | 2020-07-22 14:00:00 | Time and Materials | 1200 | 39,000 USD | . 1 2764 | 70285 | Our biggest project | EXT 6a8e0ca747 | Europe | 2019-10-01 08:00:00 | 2021-04-30 11:00:00 | Time and Materials | 1200 | 1,450,000 USD | . 2 12916 | 68093 | Upgrade to new version | TIM THE LEAVER | Europe | 2018-09-28 08:00:00 | 2020-04-27 17:00:00 | Fixed Fee | 1200 | 127,500 USD | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 45 12899 | 63852 | Huge consultancy pool | JACK THE MANAGER | Europe | 2017-08-01 08:00:00 | 2020-04-27 17:00:00 | Time and Materials | 1200 | 198,000 USD | . 46 12901 | 71248 | Small upgrade | JACK THE MANAGER | Europe | 2020-01-29 08:00:00 | 2020-12-31 17:00:00 | Time and Materials | 1200 | 108,000 USD | . 47 17719 | 70618 | Small consultancy pool | SUSAN THE MANAGER | Europe | 2019-11-06 08:00:00 | 2020-06-30 17:00:00 | Time and Materials | 1200 | 27,200 USD | . 48 rows × 10 columns . Timesheets for your team / your projects. It is possible that other teams can contribute to your projects and your team might work in outside projects Typically arrive monthly or weekly | (optional) Planned effort There might be none, in one of the next posts we&#39;ll talk about autofill | . | . | . # show timesheets timesheet = data[&quot;timesheet&quot;] timesheet . Project Activity User Period Starting Effort Type Total (Days) Sun Mon Tue Wed Thu Fri Sat Billable . 0 PRJ f74fe3647d | Consultancy | EXT 800982ab08 | 2020-02-02 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . 1 PRJ f74fe3647d | Consultancy | EXT c8c92ca432 | 2020-02-02 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . 2 PRJ f74fe3647d | Consultancy | EXT c8c92ca432 | 2020-02-09 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 620 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-12 | Actual | 1.0 | 0.0 | 0.5 | 0.0 | 0.5 | 0.0 | 0.0 | 0.0 | True | . 621 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-19 | Actual | 1.0 | 0.0 | 0.5 | 0.0 | 0.0 | 0.5 | 0.0 | 0.0 | True | . 622 PRJ 67df00a7e9 | Consultancy | EXT ca02603616 | 2020-04-26 | Reported | 1.5 | 0.0 | 0.5 | 0.5 | 0.0 | 0.5 | NaN | NaN | True | . 1792 rows × 14 columns . EXT users here are outside of our headcount (let’s say we are not getting the real names, but rather some ids from ERP in such case) . Why not just have things done by ERP? Your ERP probably does not present you anything nicely in terms of parameters you’d want to control on your level (otherwise, you won’t read this anyway). There may be a project running to improve it by 2025 - maybe one of the Big4 firms is interviewing you for requirements. If you are steering this boat long enough – you might have ended up with quick and dirty calculation, SQL queries to SAP (with field names still in German), or an Excel file. Why? Your bosses don’t care – they already hired you, and a better ERP is coming in 2025 anyway. So they want to know how much money your team makes (preferably - per person, per month, per project, with charts, projections, and comparisons) and to know why it is not so profitable (because it never is). . To simplify your way forward we are going to create a timeseries out of timesheets which is a bit more involved so you can skip it for now and come back to it later, but the point is that at the end you will get a lovely monthly pandas DataFrame that looks like this . # collapse dd = [] timesheet[&#39;Period Starting&#39;] = pd.to_datetime(timesheet[&#39;Period Starting&#39;]) weekdays = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;] for i, weekday in enumerate(weekdays): columns = [col for col in timesheet if col not in weekdays or col == weekday] tmp = timesheet[columns].copy() tmp = tmp.rename(columns={weekday: &#39;effort&#39;}) tmp[&#39;date&#39;] = tmp[&#39;Period Starting&#39;]+pd.to_timedelta(&#39;{}D&#39;.format(i)) tmp[&#39;weekday&#39;] = weekday tmp = tmp.drop([&#39;Period Starting&#39;, &#39;Total (Days)&#39;], axis=1) dd += [tmp] timeseries = pd.concat(dd, sort=False).sort_values([&#39;User&#39;, &#39;date&#39;]) timeseries = timeseries.reset_index().drop(&#39;index&#39;, axis=1) timeseries[&#39;date&#39;] = pd.to_datetime(timeseries[&#39;date&#39;]).astype(&#39;str&#39;) timeseries[&#39;month&#39;] = timeseries[&#39;date&#39;].str[:7] def isweekend(x): return x in [&#39;Sun&#39;, &#39;Sat&#39;] timeseries[&#39;weekend&#39;] = timeseries[&#39;weekday&#39;].apply(isweekend) timeseries[&#39;workweek&#39;] = ~timeseries[&#39;weekday&#39;].apply(isweekend) timeseries . . Project Activity User Effort Type effort Billable date weekday month weekend workweek . 0 Upgrade in two contracts - 1 | Consultancy | CATHY THE NEW MANAGER | Actual | 0.0 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 1 Upgrade in two contracts - 2 | Consultancy | CATHY THE NEW MANAGER | Actual | 0.0 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 2 A pilot for huge opportunity | Consultancy | CATHY THE NEW MANAGER | Actual | 0.0 | True | 2020-02-16 | Sun | 2020-02 | True | False | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 12541 Strategic project in a new region | Project Management | TOM THE TEAM LEADER | Reported | NaN | True | 2020-05-01 | Fri | 2020-05 | False | True | . 12542 Strategic project in a new region 2 | Consultancy | TOM THE TEAM LEADER | Actual | NaN | False | 2020-05-02 | Sat | 2020-05 | True | False | . 12543 Strategic project in a new region | Project Management | TOM THE TEAM LEADER | Reported | NaN | True | 2020-05-02 | Sat | 2020-05 | True | False | . 12544 rows × 11 columns . It is common in data science to have one big DataFrame (similar to excel tab or SQL table) that you can group and filter easily. It is helpful because it makes things very easy. . Profitability . Timesheets and project budgets are simplified this way, and you can manipulate them the way you want in a few simple statements. If you studied excel formulas - you could do this also. Now, let’s look at profitability in the most straightforward manner possible. As a manager, we suggest you do that to set benchmarks for your team. So, profit is $$ mbox{Revenue  –  Cost}$$ and we intend to keep it simple. You can implement the calculations you like. . Revenue: Let’s say that for a Time &amp; Material project, you generate as much revenue as you bill (on agreed rate) up to its budget. We are not doing any Fixed Fee recognition formula. Different companies do it differently, and you’ll either need historical data or actual recognized value depending on how you operate. . We also assume that we are interested only by users in our headcount (so we filter out all EXT users). . # revenue calculation for a person for a month # (SUM REV of all timesheet records * corresp project rates) revenue_df = timeseries[[&#39;User&#39;, &#39;Project&#39;, &#39;Billable&#39;, &#39;effort&#39;, &#39;date&#39;, &#39;month&#39;]] revenue_df = revenue_df.merge(projects[[&#39;Project&#39;, &#39;Daily Rate&#39;]], how=&#39;left&#39;, on=&#39;Project&#39;) revenue_df[&#39;Daily Rate&#39;].fillna(default_revenue, inplace=True) revenue_df = revenue_df[(revenue_df[&#39;User&#39;].str[:3] != &#39;EXT&#39;) &amp; (revenue_df[&#39;Billable&#39;])] revenue_df[&#39;daily_revenue&#39;] = revenue_df[&#39;Daily Rate&#39;] * revenue_df[&#39;effort&#39;] revenue = revenue_df.groupby([&#39;User&#39;, &#39;month&#39;])[ &#39;daily_revenue&#39;].sum().unstack().fillna(0) revenue = revenue[revenue.sum(1) &gt; 0] revenue.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 11550.000 | 19350.00 | 9412.500 | 0.0 | . FRANK THE CONSTULANT 15750.000 | 12425.00 | 14875.000 | 0.0 | . IVAN THE PROGRAMMER 25062.500 | 29043.75 | 25643.750 | 0.0 | . JACK THE EXPERT 29093.750 | 31331.25 | 24843.750 | 0.0 | . JACK THE MANAGER 24090.625 | 22318.75 | 18821.875 | 0.0 | . We got revenue per month per person. Not too sophisticated, right? . Cost: Let’s start with the fact that just using the “default cost rate” is not enough - whenever margins are under pressure, you should do better. You might have people working in different countries and of totally different levels. Talk to your finance team and get some estimates from them (or make it together). We’d say they owe you that much if you were appointed to run a team or business unit. We will assume below that you managed to get a few grades per Country (see roles). Costs per individual will be nice to have as well. The beauty of this tool (compared to doing Excel by yourself) is that you can just add it - it will be a few lines of code. Let’s calculate direct cost per month: here we check the cost of effort posted on timesheets, presuming they are full - can check per number of working days in a month also and compare. We are not interested in external resources, so we’ll filter them out again. . headcount . Name Engagement Country Position Seniority region cost . 0 JANE DOE | STAFF | US | Consultant | EXPERIENCED | US | 550.0 | . 1 JOHN DOE | STAFF | FR | Consultant | JUNIOR | NaN | 850.0 | . 2 JOHN SMITH | STAFF | US | Consultant | EXPERIENCED | US | 550.0 | . ... ... | ... | ... | ... | ... | ... | ... | . 32 JOHN THE CONSULTANT | STAFF | FR | Consultant | EXPERIENCED | NaN | 850.0 | . 33 JANE THE MANAGER | CONTRACTOR | BE | Project Manager | SENIOR | NaN | 850.0 | . 34 JACK THE EXPERT | STAFF | BE | Consultant | SENIOR | NaN | 850.0 | . 35 rows × 7 columns . # cost calculation for a project # (SUM COST of all timesheet records * corresp cost rates - see roles) cost_df = timeseries[[&#39;User&#39;, &#39;Project&#39;, &#39;effort&#39;, &#39;date&#39;, &#39;month&#39;]] cost_df = cost_df.merge(headcount[[&#39;Name&#39;, &#39;cost&#39;]], how=&#39;left&#39;, left_on=&#39;User&#39;, right_on=&#39;Name&#39;) cost_df = cost_df[cost_df[&#39;User&#39;].str[:3] != &#39;EXT&#39;] cost_df[&#39;daily_cost&#39;] = cost_df[&#39;cost&#39;] * cost_df[&#39;effort&#39;] cost = cost_df.groupby([&#39;User&#39;, &#39;month&#39;])[&#39;daily_cost&#39;].sum() cost = cost.unstack().fillna(0) cost = cost[cost.sum(1) &gt; 0] cost.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 5362.500 | 11343.750 | 9332.8125 | 0.0 | . FRANK THE CONSTULANT 7700.000 | 8662.500 | 7768.7500 | 0.0 | . IVAN THE PROGRAMMER 11481.250 | 12925.000 | 11618.7500 | 0.0 | . JACK THE EXPERT 19921.875 | 21621.875 | 18168.7500 | 0.0 | . JACK THE MANAGER 11800.000 | 10900.000 | 9600.0000 | 0.0 | . Now, we can get to profit per user per month using operations on dataframes. And here it bears some fruit. Profit = revenue - cost. Indeed, it required some data cleanup first - but not too much . profit = revenue - cost profit.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 6187.500 | 8006.250 | 79.6875 | 0.0 | . FRANK THE CONSTULANT 8050.000 | 3762.500 | 7106.2500 | 0.0 | . IVAN THE PROGRAMMER 13581.250 | 16118.750 | 14025.0000 | 0.0 | . JACK THE EXPERT 9171.875 | 9709.375 | 6675.0000 | 0.0 | . JACK THE MANAGER 12290.625 | 11418.750 | 9221.8750 | 0.0 | . That&#39;s what we&#39;ve promised, right? Ok, second one - people who entered most Billable hours in March . t = timeseries # concatenating just in case you are reading from phone t.where(t[&#39;Billable&#39;] &amp; (t[&#39;month&#39;] == &#39;2020-03&#39;) ).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . User TOM THE EXPERT 26.7500 JACK THE EXPERT 25.3125 PHILIP THE EXPERT 24.8750 Name: effort, dtype: float64 . What else? . Now let’s look at how to apply some python and data science techniques (we will get to more details in our next posts) to data you’ve seen above and how to visualize it nicely. . First, let’s take a PM and visualize revenue on his/her projects per month. . %matplotlib inline pm_selected = &quot;CATHY THE NEW MANAGER&quot; drawdt = revenue.loc[pm_selected].T plt.bar(range(len(drawdt.index)), drawdt.values, color=&quot;green&quot;, width=1, align=&#39;center&#39;, edgecolor=&#39;black&#39;); plt.xticks(range(len(drawdt.index)), drawdt.index); plt.ylabel(&quot;Revenue / month: &quot;+pm_selected); . That was simple. Then, some fun for those who know slightly more advanced python - you can make an interactive chart in few lines, e.g., here we want to make it visual in terms of if the value is above or below the benchmark (works if you copy notebook, is not clickable on the blog) . # collapse %matplotlib notebook # colors of bars def get_colors(v): colors = [] for i in range(len(drawdt.index)): color = &quot;yellow&quot; if (drawdt[i] &lt; v*0.9): color = &quot;red&quot; if (drawdt[i] &gt; v*1.1): color = &quot;green&quot; colors.append(color) return colors # plot drawing def plt_all(isdef, yvalue): if isdef: bcolors = &quot;white&quot; xtitle = &#39;Set value&#39; else: a = np.empty(len(drawdt.index)) a.fill(yvalue) plt.plot(range(len(drawdt.index)), a, color=&quot;black&quot;, alpha=0.5) bcolors = get_colors(yvalue) xtitle = &#39;At ${:.0f}/m is&#39;.format(yvalue) plt.bar(range(len(drawdt.index)), drawdt.values, color=bcolors, width=1, align=&#39;center&#39;, edgecolor=&#39;black&#39;) plt.xticks(range(len(drawdt.index)), drawdt.index) plt.ylabel(&quot;Revenue / month: &quot;+pm_selected) red_patch = mpatches.Patch(color=&#39;red&#39;, label=&#39;loss&#39;) yellow_patch = mpatches.Patch(color=&#39;yellow&#39;, label=&#39;in 10%&#39;) green_patch = mpatches.Patch(color=&#39;green&#39;, label=&#39;profit&#39;) plt.legend(handles=[red_patch, yellow_patch, green_patch], loc=&#39;upper left&#39;, title=xtitle, fontsize=7) plt.gca().set_title(&#39;Click on the plot to set benchmark&#39;) plt_all(True, 0.0) def onclick(event): plt.cla() plt_all(False, event.ydata) plt.gcf().canvas.mpl_connect(&#39;button_press_event&#39;, onclick); . . Ok, as a Team Leader, you might not do that. Sorry. Let’s get some calculations done. First, let’s identify “suspicious” time entered (e.g., a person who has more than three days in a row same effort on a given project and it is not 8 hours) - this is a quick check you do yourself, without asking PMO anything and making this official. I can call this suspicious because nature of our work (and yours might be different - so you look for another pattern) makes it highly unlikely that you do spend the same amount of time on one project a few days in a row (unless you are assigned full time). What you are doing is likely just splitting your working time between your projects in some manner. . # remove the weekend working = timeseries[(timeseries[&#39;workweek&#39;] == True) &amp; (timeseries.Billable)].copy() working = working.groupby([&quot;User&quot;, &quot;Project&quot;, &quot;date&quot;]).sum().sort_index() working[&#39;value_grp&#39;] = (working.effort.diff(1) == 0).astype(&#39;int&#39;) def streak(df): # function that finds streak of 1s: 0,1,1,0,1 -&gt; 0,1,2,0,1 df0 = df != 0 return df0.cumsum()-df0.cumsum().where(~df0).ffill().fillna(0).astype(int) working[&#39;streak&#39;] = streak( working[&#39;value_grp&#39;]) # streak of identical effort result = working[(0 &lt; working.effort) &amp; (working.effort &lt; 1) &amp; (working[&#39;streak&#39;] &gt; 3)].reset_index() result = result[result.User.str[:3] != &#39;EXT&#39;].groupby([&#39;User&#39;, &#39;Project&#39;]).last() result[[&quot;effort&quot;,&quot;date&quot;,&quot;streak&quot;]] . effort date streak . User Project . CATHY THE NEW MANAGER Upgrade in two contracts - 1 0.0625 | 2020-03-12 | 6 | . FRANK THE CONSTULANT Upgrade in two contracts - 1 0.1250 | 2020-03-05 | 4 | . Upgrade in two contracts - 2 0.1250 | 2020-03-05 | 4 | . JACK THE EXPERT Some upgrade project 0.1250 | 2020-03-13 | 4 | . JOHN THE CONSULTANT PRJ f8b96bd2c4 0.2500 | 2020-04-28 | 6 | . TIM THE LEAVER Big upgrade and rework 0.1250 | 2020-03-09 | 4 | . Upgrade to new version 0.1250 | 2020-03-10 | 4 | . To be clear, we do not recommend sending emails with the subject “The list of those whose timings are suspicious” based on the above. People will likely change their behaviors, and you might not easily find the next pattern. As a manager, you dig into your data, find insights, and act on them the way you see fit. You do not just tell your teenage kid that now you know where he hides cigarettes, do you? . Use cases . Here are some cases where the above can be helpful - we will look at some of them in our next posts. . Decision-making - e.g. identify top loss-making projects | Identify projects which require management attention - also apply Machine Learning here and identify the projects you&#39;ll pick up yourself | Better analysis of non-billable hours | Identify suspicious behaviors - anomaly detections | Revenue and effort projections based on existing patterns and not highlighting when the plan deviates | Consolidated analytic on demand (e.g. profitability forecast, revenue forecast, unallocated capacity) in case your ERP will not do anything like that | . The point is that loading your data (excel, CSV, TSV - whatever) is simple, and manipulating it is simple - more straightforward than doing it in many excel files and faster than waiting for PMOs. . Stay tuned for our next post. . Copyright &copy; Dmytro Karabash, Maxim Korotkov; 2020. This notebook is licensed under a Creative Commons Attribution 4.0 International License. .",
            "url": "https://yourdatablog.com/teamdata2/",
            "relUrl": "/teamdata2/",
            "date": " • Jun 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Data Science and Management by Dmytro Karabash . Management and Data Science by Maxim Korotkov . While traveling from New York to Florida by car in 2019 we&#39;ve discussed many things and got fascinated by various applications of Data Science to topics it is typically not applied to. For example, how data science techniques can be applied not only by data scientists but also by practitioners in different industries. Python is relatively simple (if you want to keep doing simple things) - so whoever mastered in Microsoft Excel or Apple Sheets can get to a decent level of understanding python. We proceeded to kayak in the middle of Ocala National Forest (see photo below). We decided to synthesize our experiences and create this blog about applications of Data Science to Project Management and General Management and other topics we might find of interest. . . Have something to add or a comment? Contact us via email . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yourdatablog.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Welcome here. Here is our blog about applying Data Science to Management and related topics. Things you used to rely on ERP or on your PMO doing a report - how those things can be made simple with python, pandas, and jupyter. . POSTS .",
          "url": "https://yourdatablog.com/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yourdatablog.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}