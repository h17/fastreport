{
  
    
        "post0": {
            "title": "Working with your team data",
            "content": "Introduction . You’re a boss now. You have a team or a business unit doing consultancy. Probably a bunch of Consultants helping clients, some Project Managers leading your projects in a nice Agile or whatever way. Everyone fills their timesheets (and you cut their bonuses if they don’t) – time is billed to clients and you have Fixed Fee projects also. Maybe smaller teams being parts of your team also – you can lead ten, hundred or thousand people (hey, dude – you run a unit of 1000 employees? Don’t read this article – hire someone who did) You probably even have an ERP or something and a CFO in a nice corner office. Do you have a good way to estimate how much profit every team member and project brings and ways to predict it with good precision? If you have a nice ERP dashboard which gives you all that – then you’re lucky and you don’t need this article either. But high chances are that you get a simple calculation end of year – like “let’s take all revenue finance recognized on your projects in a year and man day cost at USD 800 to get your unit profitability” ( USD 800 can seem crazily high or unacceptably low, depending on business you’re in). So that’s the precision you have to count the money your team brings to firm? Do we need to remind you that this is the only reason why your job exists? . What else can you get – all the timesheets, projects with their budgets and you can even get to approximate costs (let&#39;s discuss it later). Shitload of data for a year even for a team of 10. What I will tell you here is that you don’t need an ERP to do the rest – the notebook in Jupyter will do. Let’s remember - management starts with measurement. How can you supervise your team and projects if you don’t have their data at your fingers? . Why do you need Data Science here? Well, you can have all data at your fingers. Eventually you would want to calculate your profit like . profit = revenue - cost . Not only as subtracting two numbers, but also on the level of tables - so output of above statement can be a table with profit per consultant per month, like this: . profit . 2020-02 2020-03 . CATHY THE NEW MANAGER $ 6187.50 | $ 8006.25 | . FRANK THE CONSTULANT $ 8050.00 | $ 3762.50 | . Or get list of 3 people with most unbillable hours in April via following statement . t.where(~t[&#39;Billable&#39;] &amp; (t[&#39;Month&#39;]==&#39;2020-04&#39;)).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . The code above is indeed not executable, but we promise to get you there in a few paragraphs. And yes, there is some learning of python required. The huge difference from anything else you&#39;ve been doing yourself (ERP reports, Excel, other tools) is that any analysis stays here in the notebook and can be re-applied after your data changes. . Data Science . So, let’s get this done. First – yes, you need to know a little bit of python to get the files in. Basic level will do. (If you are a manager in 2020 and can’t write a simple script – hm, you probably missed something). The objective is not to build an ERP and not even to have an easy-to-use toolkit - we want to show you how to build toolkit for yourself (but feel free to reuse our code). What you will see is a very simple set of examples - spend an hour or two to load your files into the notebook and then start playing with it - just make the analysis you want. You can end up checking a few numbers or building your own charts and dashboards. It is ok, even if you work for a corporation (that’s where you need it most) - just install Anaconda and download the notebook. So, we first get and transform our input files (if you want to follow text AND all the code - read it on colab) . We are loading projects, timesheets and roles below - more details will follow on what we presumed is inside. Note - files are loaded from github repository, so they will open in colab or your local machine just the same. . data = {} data_path = &#39;https://raw.githubusercontent.com/h17/fastreport/master/data/&#39; url = data_path + &#39;roles.csv&#39; data[&#39;roles&#39;] = pd.read_csv(url, index_col=0, sep=&quot;;&quot;) url = data_path + &#39;project_data.xlsm&#39; project_data = pd.ExcelFile(url) project_data.sheet_names . [&#39;TS Feb&#39;, &#39;TS Mar&#39;, &#39;TS Apr&#39;, &#39;Projects&#39;, &#39;Employees&#39;] . Don&#39;t focus too much on the next code block - we have monthly timesheets in separate tabs and need to stack them one on top of another. Plus - we have errors in excel (Sat.1 column) - data cleanup is also required, quite usual for those of you who&#39;ve at as much as heard of data scient. Collapsed blocks in our notebook contain the code which is not critical for understanding. If you&#39;d rather read it all - we suggest you switch to either github or colab - so you can play with it also. . # collapse timesheets = [] for sheet in project_data.sheet_names: if &#39;TS&#39; in sheet: timesheets += [pd.read_excel(project_data, sheet, header=2)] else: tmp = pd.read_excel(project_data, sheet) data[sheet] = tmp if &#39;Sat.1&#39; in timesheets[0]: #cleaning data sheet timesheets[0] = timesheets[0].rename( columns={&#39;Sat&#39;: &#39;Sun&#39;, &#39;Sat.1&#39;: &#39;Sat&#39;}) data[&#39;timesheet&#39;] = pd.concat(timesheets, sort=False) # replease billable field by bool - helpful to simplify code d = {&#39;Billable&#39;: True, &#39;Non-Billable&#39;: False} data[&#39;timesheet&#39;][&#39;Billable&#39;] = data[&#39;timesheet&#39;][&#39;Billing&#39;].replace(d) data[&#39;timesheet&#39;].drop([&#39;Billing&#39;], axis=1, inplace=True) data[&#39;timesheet&#39;] = data[&#39;timesheet&#39;][~data[&#39;timesheet&#39;].User.isnull()] # data.keys() . . So, let&#39;s see what we&#39;ve got here . data.keys() for key in data.keys(): string_format = &quot;{:20} shape: {:&gt;10} rows t and {:&gt;10} columns&quot; print(string_format.format(key, *data[key].shape)) . dict_keys([&#39;roles&#39;, &#39;Projects&#39;, &#39;Employees&#39;, &#39;timesheet&#39;]) . roles shape: 8 rows and 4 columns Projects shape: 48 rows and 10 columns Employees shape: 35 rows and 5 columns timesheet shape: 1792 rows and 14 columns . Data we loaded . Let me summarize it here – in any decent firm, if you are a team leader or business unit manager – you can get . Dictionaries Cost per region or default cost for “outside” contributors | Average revenue per hour for projects not “owned” by you | . | . # show roles roles = data[&quot;roles&quot;] default_revenue = 1200 default_cost = 850 # wide to long format roles_long = pd.melt(roles.reset_index(), id_vars=[&#39;Position&#39;, &#39;Seniority&#39;], var_name=&#39;region&#39;, value_name=&#39;cost&#39;) roles_long . Position Seniority region cost . 0 Unit Head | SENIOR | EU | 1100 | . 1 Program Manager | EXPERIENCED | EU | 900 | . 2 Project Manager | SENIOR | EU | 800 | . ... ... | ... | ... | ... | . 21 Consultant | SENIOR | UK | 900 | . 22 Consultant | EXPERIENCED | UK | 550 | . 23 Consultant | JUNIOR | UK | 500 | . 24 rows × 4 columns . HeadCount List of your employees, with their grades (or costs) | Engagement model (employee or contractor) | . | . # show head count headcount = data[&quot;Employees&quot;] headcount = headcount.merge(roles_long[[&#39;Position&#39;, &#39;Seniority&#39;, &#39;region&#39;, &#39;cost&#39;]], how=&#39;left&#39;, left_on=[&#39;Seniority&#39;, &#39;Position&#39;, &#39;Country&#39;], right_on=[&#39;Seniority&#39;, &#39;Position&#39;, &#39;region&#39;]) headcount[&#39;cost&#39;] = headcount[&#39;cost&#39;].fillna(default_cost) headcount . Name Engagement Country Position Seniority region cost . 0 JANE DOE | STAFF | US | Consultant | EXPERIENCED | US | 550.0 | . 1 JOHN DOE | STAFF | FR | Consultant | JUNIOR | NaN | 850.0 | . 2 JOHN SMITH | STAFF | US | Consultant | EXPERIENCED | US | 550.0 | . ... ... | ... | ... | ... | ... | ... | ... | . 32 JOHN THE CONSULTANT | STAFF | FR | Consultant | EXPERIENCED | NaN | 850.0 | . 33 JANE THE MANAGER | CONTRACTOR | BE | Project Manager | SENIOR | NaN | 850.0 | . 34 JACK THE EXPERT | STAFF | BE | Consultant | SENIOR | NaN | 850.0 | . 35 rows × 7 columns . Projects Budget, effort estimate, deadline | Project type (e.g. “On demand support” or “Subscription” will not have any actual deadline to control) - though it is ok if you don’t have it | Type of revenue recognition (Time and Material or Fixed Fee) | . | . # show projects projects = data[&quot;Projects&quot;] projects . Client ID Project ID Project PM Region Start End Funding Daily Rate TCV . 0 13154 | 68454 | Medium consutancy 1 | SUSAN THE MANAGER | Europe | 2019-01-16 08:00:00 | 2020-07-22 14:00:00 | Time and Materials | 1200 | 39,000 USD | . 1 2764 | 70285 | Our biggest project | EXT 6a8e0ca747 | Europe | 2019-10-01 08:00:00 | 2021-04-30 11:00:00 | Time and Materials | 1200 | 1,450,000 USD | . 2 12916 | 68093 | Upgrade to new version | TIM THE LEAVER | Europe | 2018-09-28 08:00:00 | 2020-04-27 17:00:00 | Fixed Fee | 1200 | 127,500 USD | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 45 12899 | 63852 | Huge consultancy pool | JACK THE MANAGER | Europe | 2017-08-01 08:00:00 | 2020-04-27 17:00:00 | Time and Materials | 1200 | 198,000 USD | . 46 12901 | 71248 | Small upgrade | JACK THE MANAGER | Europe | 2020-01-29 08:00:00 | 2020-12-31 17:00:00 | Time and Materials | 1200 | 108,000 USD | . 47 17719 | 70618 | Small consultancy pool | SUSAN THE MANAGER | Europe | 2019-11-06 08:00:00 | 2020-06-30 17:00:00 | Time and Materials | 1200 | 27,200 USD | . 48 rows × 10 columns . Timesheets (your team / your projects, note that other teams can contribute to your projects and your team might work in other projects) Typically arrive monthly or weekly | (optional) Plans If there are no plans, in one of next options we&#39;ll talk about an option to “plan auto-fill” | . | . | . # show timesheets timesheet = data[&quot;timesheet&quot;] timesheet . Project Activity User Period Starting Effort Type Total (Days) Sun Mon Tue Wed Thu Fri Sat Billable . 0 PRJ d41d8cd98f | Consultancy | EXT 800982ab08 | 2020-02-02 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . 1 PRJ d41d8cd98f | Consultancy | EXT c8c92ca432 | 2020-02-02 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . 2 PRJ d41d8cd98f | Consultancy | EXT c8c92ca432 | 2020-02-09 | Actual | 2.5 | 0.0 | 0.5 | 0.5 | 0.5 | 0.5 | 0.5 | 0.0 | True | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 620 PRJ d41d8cd98f | Consultancy | EXT ca02603616 | 2020-04-12 | Actual | 1.0 | 0.0 | 0.5 | 0.0 | 0.5 | 0.0 | 0.0 | 0.0 | True | . 621 PRJ d41d8cd98f | Consultancy | EXT ca02603616 | 2020-04-19 | Actual | 1.0 | 0.0 | 0.5 | 0.0 | 0.0 | 0.5 | 0.0 | 0.0 | True | . 622 PRJ d41d8cd98f | Consultancy | EXT ca02603616 | 2020-04-26 | Reported | 1.5 | 0.0 | 0.5 | 0.5 | 0.0 | 0.5 | NaN | NaN | True | . 1792 rows × 14 columns . EXT users here are the ones not registered in our HeadCount (let&#39;s say we are not getting the real names, but rather some ids from ERP in such case) . Why not just have things done by ERP? Well, your ERP probably does not present you anything nicely in terms of parameters you’d want to control on your level (otherwise you won’t read this anyway). There is even maybe a project running to improve it by 2025 - maybe one of Big4 firms is interviewing you for requirements. If you are steering this boat long enough – you might have ended up with quick and dirty calculation, SQL queries to SAP (with field names still in German) or an Excel file. Why? Because, well, your bosses don’t care – they already hired you and a better ERP is coming in 2025 anyway – so they want to know how much money your team makes (preferably - per person, per month, per project) and to know why is it not so profitable (because it never is). . To simplify your way forward we are going to create a timeseries out of timesheets which is a bit more involved so you can skip it for now and come back to it later, but the point is that at the end you will get a nice monthly pandas Dataframe that looks like this . # collapse dd = [] timesheet[&#39;Period Starting&#39;] = pd.to_datetime(timesheet[&#39;Period Starting&#39;]) weekdays = [&#39;Sun&#39;, &#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;] for i, weekday in enumerate(weekdays): columns = [col for col in timesheet if col not in weekdays or col == weekday] tmp = timesheet[columns].copy() tmp = tmp.rename(columns={weekday: &#39;effort&#39;}) # dmytro todo: check period starting offset logic tmp[&#39;date&#39;] = tmp[&#39;Period Starting&#39;]+pd.to_timedelta(&#39;{}D&#39;.format(i)) tmp[&#39;weekday&#39;] = weekday tmp = tmp.drop([&#39;Period Starting&#39;, &#39;Total (Days)&#39;], axis=1) dd += [tmp] timeseries = pd.concat(dd, sort=False).sort_values([&#39;User&#39;, &#39;date&#39;]) timeseries = timeseries.reset_index().drop(&#39;index&#39;, axis=1) timeseries[&#39;date&#39;] = pd.to_datetime(timeseries[&#39;date&#39;]).astype(&#39;str&#39;) # dmytro todo: maybe improve date, month stylistics timeseries[&#39;month&#39;] = timeseries[&#39;date&#39;].str[:7] isweekend = lambda x: x in [&#39;Sun&#39;, &#39;Sat&#39;] timeseries[&#39;weekend&#39;] = timeseries[&#39;weekday&#39;].apply(isweekend) timeseries[&#39;workweek&#39;] = ~timeseries[&#39;weekday&#39;].apply(isweekend) timeseries . . Project Activity User Effort Type effort Billable date weekday month weekend workweek . 0 Upgrade in two contracts - 1 | Consultancy | CATHY THE NEW MANAGER | Actual | 0.0 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 1 Upgrade in two contracts - 2 | Consultancy | CATHY THE NEW MANAGER | Actual | 0.0 | True | 2020-02-16 | Sun | 2020-02 | True | False | . 2 A pilot for huge opportunity | Consultancy | CATHY THE NEW MANAGER | Actual | 0.0 | True | 2020-02-16 | Sun | 2020-02 | True | False | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 12541 Strategic project in a new region | Project Management | TOM THE TEAM LEADER | Reported | NaN | True | 2020-05-01 | Fri | 2020-05 | False | True | . 12542 Strategic project in a new region 2 | Consultancy | TOM THE TEAM LEADER | Actual | NaN | False | 2020-05-02 | Sat | 2020-05 | True | False | . 12543 Strategic project in a new region | Project Management | TOM THE TEAM LEADER | Reported | NaN | True | 2020-05-02 | Sat | 2020-05 | True | False | . 12544 rows × 11 columns . It is very typical in data science to do it this (or to unstack dates) so that you can group and filter easily. . Profitability . Timesheets and projects budgets are simplified this way and you can manipulate them the way you want in few simple statements. If you studied excel formulas - you can do this also. Now, let&#39;s look at profitability in a simplest manner possible. As a manager, we suggest you do that to set benchmarks for you team. So, profit is Revenue – Cost and we intend to keep it simple. Having said that, you can implement the calculations you like. . Revenue: Let’s say that for a Time &amp; Material project you generate as much revenue as you bill (on agreed rate) up to its budget. We are not doing a Fixed Fee recognition formula. Different companies do it differently and you&#39;ll either need historical data or actual recognized value depending on how you operate. . We also assume that we are interested only by users in our headcount (so we filter out all EXT users) . # revenue calculation for a person for a month (SUM REV of all timesheet records * corresp project rates) revenue_df = timeseries[[&#39;User&#39;, &#39;Project&#39;, &#39;Billable&#39;, &#39;effort&#39;, &#39;date&#39;, &#39;month&#39;]] revenue_df = revenue_df.merge(projects[[&#39;Project&#39;, &#39;Daily Rate&#39;]], how=&#39;left&#39;, on=&#39;Project&#39;) revenue_df[&#39;Daily Rate&#39;].fillna(default_revenue, inplace=True) revenue_df = revenue_df[(revenue_df[&#39;User&#39;].str[:3] != &#39;EXT&#39;) &amp; (revenue_df[&#39;Billable&#39;])] revenue_df[&#39;daily_revenue&#39;] = revenue_df[&#39;Daily Rate&#39;] * revenue_df[&#39;effort&#39;] revenue = revenue_df.groupby([&#39;User&#39;, &#39;month&#39;])[ &#39;daily_revenue&#39;].sum().unstack().fillna(0) revenue = revenue[revenue.sum(1) &gt; 0] revenue.head() # dmytro todo: check null effort, do smart groupby -&gt; go to raw data . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 11550.000 | 19350.00 | 9412.500 | 0.0 | . FRANK THE CONSTULANT 15750.000 | 12425.00 | 14875.000 | 0.0 | . IVAN THE PROGRAMMER 25062.500 | 29043.75 | 25643.750 | 0.0 | . JACK THE EXPERT 29093.750 | 31331.25 | 24843.750 | 0.0 | . JACK THE MANAGER 24090.625 | 22318.75 | 18821.875 | 0.0 | . So, we got revenue per month per person. Not too sophisticated, right? . Cost: So, let’s start with the fact that just using the &quot;default cost rate&quot; is not enough - whenever margins are under pressure you should do better. You might have people working in different countries and of totally different levels. Talk to your finance team and get some estimates from them (or make it together). We’d say if you were appointed to run a team or business unit – they owe you that much. We will assume below that you managed to get few grades per Country (see roles). Costs per individual will go nicely also and the beauty of this tool (compared to doing few excels by yourself) is that you can just add it - for all your staff or some of them, it will be 1 line of code. Let&#39;s calculate direct cost per month (here we check the cost of effort posted on timesheets, presuming they are full - can check per number of working days in a month also and compare. We are not interested in external resources, so we&#39;ll filter them out again . headcount . Name Engagement Country Position Seniority region cost . 0 JANE DOE | STAFF | US | Consultant | EXPERIENCED | US | 550.0 | . 1 JOHN DOE | STAFF | FR | Consultant | JUNIOR | NaN | 850.0 | . 2 JOHN SMITH | STAFF | US | Consultant | EXPERIENCED | US | 550.0 | . ... ... | ... | ... | ... | ... | ... | ... | . 32 JOHN THE CONSULTANT | STAFF | FR | Consultant | EXPERIENCED | NaN | 850.0 | . 33 JANE THE MANAGER | CONTRACTOR | BE | Project Manager | SENIOR | NaN | 850.0 | . 34 JACK THE EXPERT | STAFF | BE | Consultant | SENIOR | NaN | 850.0 | . 35 rows × 7 columns . # cost calculation for a project (SUM COST of all timesheet records * corresp cost rates - see roles) cost_df = timeseries[[&#39;User&#39;, &#39;Project&#39;, &#39;effort&#39;, &#39;date&#39;, &#39;month&#39;]] cost_df = cost_df.merge(headcount[[&#39;Name&#39;, &#39;cost&#39;]], how=&#39;left&#39;, left_on=&#39;User&#39;, right_on=&#39;Name&#39;) cost_df = cost_df[cost_df[&#39;User&#39;].str[:3] != &#39;EXT&#39;] cost_df[&#39;daily_cost&#39;] = cost_df[&#39;cost&#39;] * cost_df[&#39;effort&#39;] cost = cost_df.groupby([&#39;User&#39;, &#39;month&#39;])[ &#39;daily_cost&#39;].sum().unstack().fillna(0) cost = cost[cost.sum(1) &gt; 0] cost.head() # dmytro todo: check null effort, do smart groupby . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 5362.500 | 11343.750 | 9332.8125 | 0.0 | . FRANK THE CONSTULANT 7700.000 | 8662.500 | 7768.7500 | 0.0 | . IVAN THE PROGRAMMER 11481.250 | 12925.000 | 11618.7500 | 0.0 | . JACK THE EXPERT 19921.875 | 21621.875 | 18168.7500 | 0.0 | . JACK THE MANAGER 11800.000 | 10900.000 | 9600.0000 | 0.0 | . Now, we can get to profit per user per month using operations on dataframes. And here it bears some fruit. Profit = revenue - cost. Indeed, it required some data cleanup first - but not too much . profit = revenue - cost profit.head() . month 2020-02 2020-03 2020-04 2020-05 . User . CATHY THE NEW MANAGER 6187.500 | 8006.250 | 79.6875 | 0.0 | . FRANK THE CONSTULANT 8050.000 | 3762.500 | 7106.2500 | 0.0 | . IVAN THE PROGRAMMER 13581.250 | 16118.750 | 14025.0000 | 0.0 | . JACK THE EXPERT 9171.875 | 9709.375 | 6675.0000 | 0.0 | . JACK THE MANAGER 12290.625 | 11418.750 | 9221.8750 | 0.0 | . That&#39;s what we&#39;ve promised, right? Ok, second one - people who entered most Non-Billable hours in April . timeseries.where(~timeseries[&#39;Billable&#39;] &amp; ( timeseries[&#39;month&#39;] == &#39;2020-04&#39;)).groupby([&#39;User&#39;])[&#39;effort&#39;].sum().nlargest(3) . User CATHY THE NEW MANAGER 9.125000 EXT 6d5bda8573 6.933333 EXT 7bdf4bf350 5.000000 Name: effort, dtype: float64 . What else? . Now let&#39;s look at how to apply some data science techniques (we will get to more details in our next posts) to data you&#39;ve seen above and how to visualize this data easily. . First, let&#39;s take a PM and visualize revenue on his/her projects per month . %matplotlib inline pm_selected= &quot;CATHY THE NEW MANAGER&quot; drawdt = revenue.loc[pm_selected].T # dmytro TODO: anything simpler then _= to suppress output? _ = plt.bar(range(len(drawdt.index)), drawdt.values, color=&quot;green&quot;, width=1, align=&#39;center&#39;, edgecolor=&#39;black&#39;) _ = plt.xticks(range(len(drawdt.index)), drawdt.index) _ = plt.ylabel(&quot;Revenue / month: &quot;+pm_selected) . That was simple. Then, some fun for those who know slightly more advanced python - you can make an interactive chart in few lines, e.g. here we want to make it visual in terms of if the value is above or below benchmark (works if you copy notebook, is not clickable on the blog) . # collapse # dmytro TODO: code review # dmytro TODO: weird behavior after restarting the notebook # dmytro TODO: this # 1. Is only rendered in fastpages (which is semi-ok) # 2. Does not work on colab (which is not that nice) %matplotlib notebook # colors of bars def get_colors(v): colors = [] for i in range(len(drawdt.index)): color = &quot;yellow&quot; if (drawdt[i] &lt; v*0.9): color = &quot;red&quot; if (drawdt[i] &gt; v*1.1): color = &quot;green&quot; colors.append(color) return colors # plot drawing def plt_all(isdef, yvalue): if isdef: bcolors = &quot;white&quot; xtitle = &#39;Set value&#39; else: a = np.empty(len(drawdt.index)) a.fill(yvalue) plt.plot(range(len(drawdt.index)), a, color=&quot;black&quot;, alpha=0.5) bcolors = get_colors(yvalue) xtitle = &#39;At ${:.0f}/m is&#39;.format(yvalue) plt.bar(range(len(drawdt.index)), drawdt.values, color=bcolors, width=1, align=&#39;center&#39;, edgecolor=&#39;black&#39;) plt.xticks(range(len(drawdt.index)), drawdt.index) plt.ylabel(&quot;Revenue / month: &quot;+pm_selected) red_patch = mpatches.Patch(color=&#39;red&#39;, label=&#39;loss&#39;) yellow_patch = mpatches.Patch(color=&#39;yellow&#39;, label=&#39;in 10%&#39;) green_patch = mpatches.Patch(color=&#39;green&#39;, label=&#39;profit&#39;) plt.legend(handles=[red_patch, yellow_patch, green_patch], loc=&#39;upper left&#39;, title=xtitle, fontsize=7) plt.gca().set_title(&#39;Click on the plot to set benchmark&#39;) plt_all(True, 0.0) def onclick(event): plt.cla() plt_all(False, event.ydata) _ = plt.gcf().canvas.mpl_connect(&#39;button_press_event&#39;, onclick) . . Ok, as a Team Leader you might not do that. Sorry. Let&#39;s get some calculations done. First, let&#39;s identify &quot;suspicios&quot; behaviors (e.g. a person who has more than 5 days in a row same effort on a given project and it is not 8 hours) - this is a quick check you do yourself, without asking PMO anything and making this official . # Simple anomalies detection # need to identify series of 5 or more consequtive (weekend exluded) entries, where effort is the same and != 8 hours # so all timesheet series (Project p, User u, Date d) where # timesheet[p, u, d] = timesheet[p, u, d+1] =... = timesheet[p,u,d+4] # timesheet[p, u, d] &lt; 1 # (if &quot;5&quot; gives us no output - check 3) # I can&#39;t think of a decent formula (unless I iterate over array) . Use cases . Let&#39;s just list some cases where this can be helpful - we will look at some of them in our next posts . Decision making - e.g. identify top loss-making projects | Identify projects which require management attention - also applied Machine Learning here and identify the projects you&#39;ll pick up yourself | Better analysis of non-billable hours | Identify suspicious behaviors - anomaly detections | Revenue and effort projections based on existing patterns and not highlighting when the plan deviates | Consolidated analytic on demand (e.g. profitability forecast, revenue forecast, unallocated capacity) in case your ERP will not do anything like that | . The point is that loading your own data (excel, csv, tsv - whatever) is simple and manipulating it is also simple - definitely simpler than doing it in numerous excel files and faster than waiting for PMOs. . Copyright &copy; Dmytro Karabash, Maxim Korotkov; 2020. This notebook is licensed under a Creative Commons Attribution 4.0 International License. .",
            "url": "yourdatablog.com/teamdata/",
            "relUrl": "/teamdata/",
            "date": " • May 19, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Data Science and Management by Dmytro Karabash . Management and Data Science by Maxim Korotkov . While travelling from New York to Florida by car in 2019 we’ve discussed many things and got fascinated by various applications of Data Science to topics it is typically not applied to. For example, how data science techninques can be applied not only by data scientists, but also by practitioners in different industries. Python is fairly simple (if you want to keep doing simple things) - so whoever mastered in Microsoft Excel or Apple Sheets can get to a decent level of understanding python. . By the time we proceeded to kayak in the middle of Ocala National Forest (see photo below), we decided to synthesize our experiences and create this blog about applications of Data Science to Project Management and General Management and other topics we might find of interest. . . Have something to add or a comment? Contact us via email . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "yourdatablog.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "yourdatablog.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}